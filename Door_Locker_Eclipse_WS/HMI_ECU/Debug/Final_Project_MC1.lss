
Final_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00800060  00002f72  00003006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800102  00800102  000030a8  2**0
                  ALLOC
  3 .stab         00002d00  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001194  00000000  00000000  00005da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b68b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 26 15 	jmp	0x2a4c	; 0x2a4c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 31       	cpi	r26, 0x10	; 16
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 0b 	call	0x178c	; 0x178c <main>
      8a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ee       	ldi	r26, 0xEF	; 239
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ee       	ldi	r24, 0xEF	; 239
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MC1_askForPass>:

/* Description :
 * Displays a message to enter new password to the user & store it in the array "Password"
 */
void MC1_askForPass(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	6e 97       	sbiw	r28, 0x1e	; 30
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen(); //in case their is something displayed before this message
     b5e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("Enter new pass");
     b62:	80 e6       	ldi	r24, 0x60	; 96
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1,0);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	for(uint8 index =0 ; index<NUM_DIGITS ; index++)
     b72:	1e 8e       	std	Y+30, r1	; 0x1e
     b74:	81 c0       	rjmp	.+258    	; 0xc78 <MC1_askForPass+0x132>
	{
		Password[index] = KEYPAD_getPressedKey();
     b76:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b78:	08 2f       	mov	r16, r24
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <KEYPAD_getPressedKey>
     b80:	f8 01       	movw	r30, r16
     b82:	e5 5f       	subi	r30, 0xF5	; 245
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     b88:	8a e2       	ldi	r24, 0x2A	; 42
     b8a:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayCharacter>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	aa ef       	ldi	r26, 0xFA	; 250
     b94:	b4 e4       	ldi	r27, 0x44	; 68
     b96:	89 8f       	std	Y+25, r24	; 0x19
     b98:	9a 8f       	std	Y+26, r25	; 0x1a
     b9a:	ab 8f       	std	Y+27, r26	; 0x1b
     b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9e:	69 8d       	ldd	r22, Y+25	; 0x19
     ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a e7       	ldi	r20, 0x7A	; 122
     bac:	53 e4       	ldi	r21, 0x43	; 67
     bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	8d 8b       	std	Y+21, r24	; 0x15
     bb8:	9e 8b       	std	Y+22, r25	; 0x16
     bba:	af 8b       	std	Y+23, r26	; 0x17
     bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bbe:	6d 89       	ldd	r22, Y+21	; 0x15
     bc0:	7e 89       	ldd	r23, Y+22	; 0x16
     bc2:	8f 89       	ldd	r24, Y+23	; 0x17
     bc4:	98 8d       	ldd	r25, Y+24	; 0x18
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e8       	ldi	r20, 0x80	; 128
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd2:	88 23       	and	r24, r24
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <MC1_askForPass+0x9a>
		__ticks = 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9c 8b       	std	Y+20, r25	; 0x14
     bdc:	8b 8b       	std	Y+19, r24	; 0x13
     bde:	3f c0       	rjmp	.+126    	; 0xc5e <MC1_askForPass+0x118>
	else if (__tmp > 65535)
     be0:	6d 89       	ldd	r22, Y+21	; 0x15
     be2:	7e 89       	ldd	r23, Y+22	; 0x16
     be4:	8f 89       	ldd	r24, Y+23	; 0x17
     be6:	98 8d       	ldd	r25, Y+24	; 0x18
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	4f e7       	ldi	r20, 0x7F	; 127
     bee:	57 e4       	ldi	r21, 0x47	; 71
     bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf4:	18 16       	cp	r1, r24
     bf6:	4c f5       	brge	.+82     	; 0xc4a <MC1_askForPass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	69 8d       	ldd	r22, Y+25	; 0x19
     bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e2       	ldi	r20, 0x20	; 32
     c06:	51 e4       	ldi	r21, 0x41	; 65
     c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	9c 8b       	std	Y+20, r25	; 0x14
     c1e:	8b 8b       	std	Y+19, r24	; 0x13
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <MC1_askForPass+0xfa>
     c22:	89 e1       	ldi	r24, 0x19	; 25
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	9a 8b       	std	Y+18, r25	; 0x12
     c28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2a:	89 89       	ldd	r24, Y+17	; 0x11
     c2c:	9a 89       	ldd	r25, Y+18	; 0x12
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <MC1_askForPass+0xe8>
     c32:	9a 8b       	std	Y+18, r25	; 0x12
     c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c36:	8b 89       	ldd	r24, Y+19	; 0x13
     c38:	9c 89       	ldd	r25, Y+20	; 0x14
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	9c 8b       	std	Y+20, r25	; 0x14
     c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c40:	8b 89       	ldd	r24, Y+19	; 0x13
     c42:	9c 89       	ldd	r25, Y+20	; 0x14
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	69 f7       	brne	.-38     	; 0xc22 <MC1_askForPass+0xdc>
     c48:	14 c0       	rjmp	.+40     	; 0xc72 <MC1_askForPass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4a:	6d 89       	ldd	r22, Y+21	; 0x15
     c4c:	7e 89       	ldd	r23, Y+22	; 0x16
     c4e:	8f 89       	ldd	r24, Y+23	; 0x17
     c50:	98 8d       	ldd	r25, Y+24	; 0x18
     c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9c 8b       	std	Y+20, r25	; 0x14
     c5c:	8b 8b       	std	Y+19, r24	; 0x13
     c5e:	8b 89       	ldd	r24, Y+19	; 0x13
     c60:	9c 89       	ldd	r25, Y+20	; 0x14
     c62:	98 8b       	std	Y+16, r25	; 0x10
     c64:	8f 87       	std	Y+15, r24	; 0x0f
     c66:	8f 85       	ldd	r24, Y+15	; 0x0f
     c68:	98 89       	ldd	r25, Y+16	; 0x10
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <MC1_askForPass+0x124>
     c6e:	98 8b       	std	Y+16, r25	; 0x10
     c70:	8f 87       	std	Y+15, r24	; 0x0f
void MC1_askForPass(void)
{
	LCD_clearScreen(); //in case their is something displayed before this message
	LCD_displayString("Enter new pass");
	LCD_moveCursor(1,0);
	for(uint8 index =0 ; index<NUM_DIGITS ; index++)
     c72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c74:	8f 5f       	subi	r24, 0xFF	; 255
     c76:	8e 8f       	std	Y+30, r24	; 0x1e
     c78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c7a:	85 30       	cpi	r24, 0x05	; 5
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <MC1_askForPass+0x13a>
     c7e:	7b cf       	rjmp	.-266    	; 0xb76 <MC1_askForPass+0x30>
	{
		Password[index] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(2000);
	}
	LCD_clearScreen();
     c80:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("Re-Enter pass");
     c84:	8f e6       	ldi	r24, 0x6F	; 111
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1,0);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>

	/* we store the 2nd trial of entering the new password in confirmation_password array
	 * to check later that there is no mismatch
	 */
	for(uint8 index =0 ; index <NUM_DIGITS ; index ++)
     c94:	1d 8e       	std	Y+29, r1	; 0x1d
     c96:	81 c0       	rjmp	.+258    	; 0xd9a <MC1_askForPass+0x254>
	{
		Confirmation_Password[index] = KEYPAD_getPressedKey();
     c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c9a:	08 2f       	mov	r16, r24
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <KEYPAD_getPressedKey>
     ca2:	f8 01       	movw	r30, r16
     ca4:	ea 5f       	subi	r30, 0xFA	; 250
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     caa:	8a e2       	ldi	r24, 0x2A	; 42
     cac:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayCharacter>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	aa ef       	ldi	r26, 0xFA	; 250
     cb6:	b4 e4       	ldi	r27, 0x44	; 68
     cb8:	8b 87       	std	Y+11, r24	; 0x0b
     cba:	9c 87       	std	Y+12, r25	; 0x0c
     cbc:	ad 87       	std	Y+13, r26	; 0x0d
     cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	4a e7       	ldi	r20, 0x7A	; 122
     cce:	53 e4       	ldi	r21, 0x43	; 67
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8f 83       	std	Y+7, r24	; 0x07
     cda:	98 87       	std	Y+8, r25	; 0x08
     cdc:	a9 87       	std	Y+9, r26	; 0x09
     cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce0:	6f 81       	ldd	r22, Y+7	; 0x07
     ce2:	78 85       	ldd	r23, Y+8	; 0x08
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	2c f4       	brge	.+10     	; 0xd02 <MC1_askForPass+0x1bc>
		__ticks = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <MC1_askForPass+0x23a>
	else if (__tmp > 65535)
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	3f ef       	ldi	r19, 0xFF	; 255
     d0e:	4f e7       	ldi	r20, 0x7F	; 127
     d10:	57 e4       	ldi	r21, 0x47	; 71
     d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d16:	18 16       	cp	r1, r24
     d18:	4c f5       	brge	.+82     	; 0xd6c <MC1_askForPass+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <MC1_askForPass+0x21c>
     d44:	89 e1       	ldi	r24, 0x19	; 25
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	8b 83       	std	Y+3, r24	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <MC1_askForPass+0x20a>
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	69 f7       	brne	.-38     	; 0xd44 <MC1_askForPass+0x1fe>
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <MC1_askForPass+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <MC1_askForPass+0x246>
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
	LCD_moveCursor(1,0);

	/* we store the 2nd trial of entering the new password in confirmation_password array
	 * to check later that there is no mismatch
	 */
	for(uint8 index =0 ; index <NUM_DIGITS ; index ++)
     d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	8d 8f       	std	Y+29, r24	; 0x1d
     d9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d9c:	85 30       	cpi	r24, 0x05	; 5
     d9e:	08 f4       	brcc	.+2      	; 0xda2 <MC1_askForPass+0x25c>
     da0:	7b cf       	rjmp	.-266    	; 0xc98 <MC1_askForPass+0x152>
		Confirmation_Password[index] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(2000);

	}
}
     da2:	6e 96       	adiw	r28, 0x1e	; 30
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	08 95       	ret

00000db8 <MC1_matchingCheck>:

/*Description :
 *  Check if there is a mismatch between the password and confirmation password
 */
uint8 MC1_matchingCheck(void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <MC1_matchingCheck+0x6>
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	for(uint8 index =0 ; index <NUM_DIGITS ; index++)
     dc2:	19 82       	std	Y+1, r1	; 0x01
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <MC1_matchingCheck+0x38>
	{
		if( Password[index] != Confirmation_Password[index] )
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	fc 01       	movw	r30, r24
     dce:	e5 5f       	subi	r30, 0xF5	; 245
     dd0:	fe 4f       	sbci	r31, 0xFE	; 254
     dd2:	20 81       	ld	r18, Z
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	ea 5f       	subi	r30, 0xFA	; 250
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	80 81       	ld	r24, Z
     de2:	28 17       	cp	r18, r24
     de4:	11 f0       	breq	.+4      	; 0xdea <MC1_matchingCheck+0x32>
			return 0;
     de6:	1a 82       	std	Y+2, r1	; 0x02
     de8:	08 c0       	rjmp	.+16     	; 0xdfa <MC1_matchingCheck+0x42>
/*Description :
 *  Check if there is a mismatch between the password and confirmation password
 */
uint8 MC1_matchingCheck(void)
{
	for(uint8 index =0 ; index <NUM_DIGITS ; index++)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	85 30       	cpi	r24, 0x05	; 5
     df4:	40 f3       	brcs	.-48     	; 0xdc6 <MC1_matchingCheck+0xe>
	{
		if( Password[index] != Confirmation_Password[index] )
			return 0;
	}
	return 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	8a 83       	std	Y+2, r24	; 0x02
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <MC1_sendNewPassword>:
/* Description :
 * Sends the new password MC2 so it would be stored in EEPROM
 */

void MC1_sendNewPassword()
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	/* Send NEW_PASS flag to MC2 so it generates the function that stores the password in EEPROM */
	UART_sendByte(NEW_PASS);
     e10:	80 e5       	ldi	r24, 0x50	; 80
     e12:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
	for(uint8 index =0 ; index <NUM_DIGITS ; index++)
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	0c c0       	rjmp	.+24     	; 0xe32 <MC1_sendNewPassword+0x2c>
	{
      UART_sendByte(Password[index]);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fc 01       	movw	r30, r24
     e22:	e5 5f       	subi	r30, 0xF5	; 245
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	80 81       	ld	r24, Z
     e28:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>

void MC1_sendNewPassword()
{
	/* Send NEW_PASS flag to MC2 so it generates the function that stores the password in EEPROM */
	UART_sendByte(NEW_PASS);
	for(uint8 index =0 ; index <NUM_DIGITS ; index++)
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	85 30       	cpi	r24, 0x05	; 5
     e36:	88 f3       	brcs	.-30     	; 0xe1a <MC1_sendNewPassword+0x14>
	{
      UART_sendByte(Password[index]);
	}
}
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <MC1_mainOptions>:
/* Description :
 * Display main options : either to open the door or to change the password
 */

void MC1_mainOptions(void)
{
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	cb 55       	subi	r28, 0x5B	; 91
     e4e:	d0 40       	sbci	r29, 0x00	; 0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61

	uint8 counter = 0 ; // to count the number of times of mismatch
     e5a:	fe 01       	movw	r30, r28
     e5c:	e5 5a       	subi	r30, 0xA5	; 165
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	10 82       	st	Z, r1
	uint8 option  = 0 ; // a variable in which we store the instruction that the user entered (+ or -)
     e62:	fe 01       	movw	r30, r28
     e64:	e6 5a       	subi	r30, 0xA6	; 166
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	10 82       	st	Z, r1
	LCD_clearScreen(); //in case their is something displayed before this message
     e6a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("+ : Open door");
     e6e:	8d e7       	ldi	r24, 0x7D	; 125
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1,0);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     e7e:	8b e8       	ldi	r24, 0x8B	; 139
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	option = KEYPAD_getPressedKey();
     e86:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <KEYPAD_getPressedKey>
     e8a:	fe 01       	movw	r30, r28
     e8c:	e6 5a       	subi	r30, 0xA6	; 166
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 83       	st	Z, r24
	if( option == '+')
     e92:	fe 01       	movw	r30, r28
     e94:	e6 5a       	subi	r30, 0xA6	; 166
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 81       	ld	r24, Z
     e9a:	8b 32       	cpi	r24, 0x2B	; 43
     e9c:	09 f0       	breq	.+2      	; 0xea0 <MC1_mainOptions+0x60>
     e9e:	2e c2       	rjmp	.+1116   	; 0x12fc <MC1_mainOptions+0x4bc>
	{
      LCD_clearScreen();
     ea0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
      LCD_displayString("Enter Password");
     ea4:	8b e9       	ldi	r24, 0x9B	; 155
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
      LCD_moveCursor(1,0);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
      /* Send CHECK flag to MC2 so it generates the function that detects if the password entered is correct */
      UART_sendByte(CHECK);
     eb4:	83 e4       	ldi	r24, 0x43	; 67
     eb6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
      for(uint8 index =0; index<NUM_DIGITS ; index++)
     eba:	fe 01       	movw	r30, r28
     ebc:	e8 5a       	subi	r30, 0xA8	; 168
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	10 82       	st	Z, r1
     ec2:	c3 c0       	rjmp	.+390    	; 0x104a <MC1_mainOptions+0x20a>
     ec4:	fe 01       	movw	r30, r28
     ec6:	ef 5a       	subi	r30, 0xAF	; 175
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	aa ef       	ldi	r26, 0xFA	; 250
     ed0:	b4 e4       	ldi	r27, 0x44	; 68
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eda:	8e 01       	movw	r16, r28
     edc:	03 5b       	subi	r16, 0xB3	; 179
     ede:	1f 4f       	sbci	r17, 0xFF	; 255
     ee0:	fe 01       	movw	r30, r28
     ee2:	ef 5a       	subi	r30, 0xAF	; 175
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	60 81       	ld	r22, Z
     ee8:	71 81       	ldd	r23, Z+1	; 0x01
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4a e7       	ldi	r20, 0x7A	; 122
     ef4:	53 e4       	ldi	r21, 0x43	; 67
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	a2 83       	std	Z+2, r26	; 0x02
     f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f08:	fe 01       	movw	r30, r28
     f0a:	e3 5b       	subi	r30, 0xB3	; 179
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e8       	ldi	r20, 0x80	; 128
     f1c:	5f e3       	ldi	r21, 0x3F	; 63
     f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f22:	88 23       	and	r24, r24
     f24:	44 f4       	brge	.+16     	; 0xf36 <MC1_mainOptions+0xf6>
		__ticks = 1;
     f26:	fe 01       	movw	r30, r28
     f28:	e5 5b       	subi	r30, 0xB5	; 181
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
     f34:	64 c0       	rjmp	.+200    	; 0xffe <MC1_mainOptions+0x1be>
	else if (__tmp > 65535)
     f36:	fe 01       	movw	r30, r28
     f38:	e3 5b       	subi	r30, 0xB3	; 179
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	3f ef       	ldi	r19, 0xFF	; 255
     f48:	4f e7       	ldi	r20, 0x7F	; 127
     f4a:	57 e4       	ldi	r21, 0x47	; 71
     f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f50:	18 16       	cp	r1, r24
     f52:	0c f0       	brlt	.+2      	; 0xf56 <MC1_mainOptions+0x116>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <MC1_mainOptions+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f56:	fe 01       	movw	r30, r28
     f58:	ef 5a       	subi	r30, 0xAF	; 175
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8e 01       	movw	r16, r28
     f76:	05 5b       	subi	r16, 0xB5	; 181
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	1f c0       	rjmp	.+62     	; 0xfcc <MC1_mainOptions+0x18c>
     f8e:	fe 01       	movw	r30, r28
     f90:	e7 5b       	subi	r30, 0xB7	; 183
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	89 e1       	ldi	r24, 0x19	; 25
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
     f9c:	fe 01       	movw	r30, r28
     f9e:	e7 5b       	subi	r30, 0xB7	; 183
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <MC1_mainOptions+0x166>
     faa:	fe 01       	movw	r30, r28
     fac:	e7 5b       	subi	r30, 0xB7	; 183
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb4:	de 01       	movw	r26, r28
     fb6:	a5 5b       	subi	r26, 0xB5	; 181
     fb8:	bf 4f       	sbci	r27, 0xFF	; 255
     fba:	fe 01       	movw	r30, r28
     fbc:	e5 5b       	subi	r30, 0xB5	; 181
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	9c 93       	st	X, r25
     fca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fcc:	fe 01       	movw	r30, r28
     fce:	e5 5b       	subi	r30, 0xB5	; 181
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	d1 f6       	brne	.-76     	; 0xf8e <MC1_mainOptions+0x14e>
     fda:	27 c0       	rjmp	.+78     	; 0x102a <MC1_mainOptions+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	8e 01       	movw	r16, r28
     fde:	05 5b       	subi	r16, 0xB5	; 181
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	fe 01       	movw	r30, r28
     fe4:	e3 5b       	subi	r30, 0xB3	; 179
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	de 01       	movw	r26, r28
    1000:	a9 5b       	subi	r26, 0xB9	; 185
    1002:	bf 4f       	sbci	r27, 0xFF	; 255
    1004:	fe 01       	movw	r30, r28
    1006:	e5 5b       	subi	r30, 0xB5	; 181
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	8d 93       	st	X+, r24
    1010:	9c 93       	st	X, r25
    1012:	fe 01       	movw	r30, r28
    1014:	e9 5b       	subi	r30, 0xB9	; 185
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <MC1_mainOptions+0x1dc>
    1020:	fe 01       	movw	r30, r28
    1022:	e9 5b       	subi	r30, 0xB9	; 185
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	91 83       	std	Z+1, r25	; 0x01
    1028:	80 83       	st	Z, r24
      {
    	  _delay_ms(2000);
    	  UART_sendByte(KEYPAD_getPressedKey());
    102a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <KEYPAD_getPressedKey>
    102e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
    	  LCD_displayCharacter('*');
    1032:	8a e2       	ldi	r24, 0x2A	; 42
    1034:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayCharacter>
      LCD_clearScreen();
      LCD_displayString("Enter Password");
      LCD_moveCursor(1,0);
      /* Send CHECK flag to MC2 so it generates the function that detects if the password entered is correct */
      UART_sendByte(CHECK);
      for(uint8 index =0; index<NUM_DIGITS ; index++)
    1038:	de 01       	movw	r26, r28
    103a:	a8 5a       	subi	r26, 0xA8	; 168
    103c:	bf 4f       	sbci	r27, 0xFF	; 255
    103e:	fe 01       	movw	r30, r28
    1040:	e8 5a       	subi	r30, 0xA8	; 168
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	8c 93       	st	X, r24
    104a:	fe 01       	movw	r30, r28
    104c:	e8 5a       	subi	r30, 0xA8	; 168
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 81       	ld	r24, Z
    1052:	85 30       	cpi	r24, 0x05	; 5
    1054:	08 f4       	brcc	.+2      	; 0x1058 <MC1_mainOptions+0x218>
    1056:	36 cf       	rjmp	.-404    	; 0xec4 <MC1_mainOptions+0x84>

      }
      /* a variable that receives a flag from MC2 that identifies either
       * the password entered is correct (TRUE) or not correct (FALSE)
       */
      uint8 condition = UART_recieveByte() ;
    1058:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <UART_recieveByte>
    105c:	fe 01       	movw	r30, r28
    105e:	e7 5a       	subi	r30, 0xA7	; 167
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 83       	st	Z, r24
    1064:	e4 c0       	rjmp	.+456    	; 0x122e <MC1_mainOptions+0x3ee>
      while( condition == FALSE )
      {
    	  /* checking if the user reached the maximum number of mismatches that equals 3 */
    	  if(counter == 3)
    1066:	fe 01       	movw	r30, r28
    1068:	e5 5a       	subi	r30, 0xA5	; 165
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	09 f5       	brne	.+66     	; 0x10b4 <MC1_mainOptions+0x274>
    	  {
    		  LCD_clearScreen();
    1072:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
    		  LCD_displayString("THIEF !");
    1076:	8a ea       	ldi	r24, 0xAA	; 170
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    		  /* Send BUZZER flag to MC2 so it generates the function that opens the buzzer */
    		  UART_sendByte(BUZZER);
    107e:	82 e4       	ldi	r24, 0x42	; 66
    1080:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
    		  Timer0_init(&Timer0_config);
    1084:	87 ef       	ldi	r24, 0xF7	; 247
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Timer0_init>
    		  Timer0_setCallBack(MC1_timer0Counter);
    108c:	86 eb       	ldi	r24, 0xB6	; 182
    108e:	9b e0       	ldi	r25, 0x0B	; 11
    1090:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <Timer0_setCallBack>
    		  /* F(timer) = 8 MHZ / 1024 = 7.8125 KHz
    		   * T(timer) = 1/F(timer) = 0.128 millisecond
    		   * T(overflow) = 256*0.128 = 32.768 millisecond
    		   * To count 1 minute we need 1835 interrupt (60/0.0327)
    		   */
    		  while(g_counter != 1835){}
    1094:	80 91 02 01 	lds	r24, 0x0102
    1098:	90 91 03 01 	lds	r25, 0x0103
    109c:	f7 e0       	ldi	r31, 0x07	; 7
    109e:	8b 32       	cpi	r24, 0x2B	; 43
    10a0:	9f 07       	cpc	r25, r31
    10a2:	c1 f7       	brne	.-16     	; 0x1094 <MC1_mainOptions+0x254>
    		  /* once we reach time needed we turn off Timer0 & reset the global counter g_counter
    		   * in case we need it in another instruction
    		   */
    		  Timer0_deinit();
    10a4:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_deinit>
    		  g_counter = 0 ;
    10a8:	10 92 03 01 	sts	0x0103, r1
    10ac:	10 92 02 01 	sts	0x0102, r1
    		  /* Display again the main options */
    		  MC1_mainOptions();
    10b0:	0e 94 20 07 	call	0xe40	; 0xe40 <MC1_mainOptions>
    	  }
    	  LCD_clearScreen();
    10b4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
    	  LCD_displayString("Enter Password");
    10b8:	8b e9       	ldi	r24, 0x9B	; 155
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    	  LCD_moveCursor(1,0);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
    	  UART_sendByte(CHECK);
    10c8:	83 e4       	ldi	r24, 0x43	; 67
    10ca:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
    	  for(uint8 index =0; index<NUM_DIGITS ; index++)
    10ce:	fe 01       	movw	r30, r28
    10d0:	e9 5a       	subi	r30, 0xA9	; 169
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	10 82       	st	Z, r1
    10d6:	95 c0       	rjmp	.+298    	; 0x1202 <MC1_mainOptions+0x3c2>
    10d8:	fe 01       	movw	r30, r28
    10da:	ed 5b       	subi	r30, 0xBD	; 189
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	aa ef       	ldi	r26, 0xFA	; 250
    10e4:	b4 e4       	ldi	r27, 0x44	; 68
    10e6:	80 83       	st	Z, r24
    10e8:	91 83       	std	Z+1, r25	; 0x01
    10ea:	a2 83       	std	Z+2, r26	; 0x02
    10ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	8e 01       	movw	r16, r28
    10f0:	01 5c       	subi	r16, 0xC1	; 193
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	fe 01       	movw	r30, r28
    10f6:	ed 5b       	subi	r30, 0xBD	; 189
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a e7       	ldi	r20, 0x7A	; 122
    1108:	53 e4       	ldi	r21, 0x43	; 67
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	f8 01       	movw	r30, r16
    1114:	80 83       	st	Z, r24
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	a2 83       	std	Z+2, r26	; 0x02
    111a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    111c:	fe 01       	movw	r30, r28
    111e:	ff 96       	adiw	r30, 0x3f	; 63
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1134:	88 23       	and	r24, r24
    1136:	2c f4       	brge	.+10     	; 0x1142 <MC1_mainOptions+0x302>
		__ticks = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9e af       	std	Y+62, r25	; 0x3e
    113e:	8d af       	std	Y+61, r24	; 0x3d
    1140:	46 c0       	rjmp	.+140    	; 0x11ce <MC1_mainOptions+0x38e>
	else if (__tmp > 65535)
    1142:	fe 01       	movw	r30, r28
    1144:	ff 96       	adiw	r30, 0x3f	; 63
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	4f e7       	ldi	r20, 0x7F	; 127
    1154:	57 e4       	ldi	r21, 0x47	; 71
    1156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115a:	18 16       	cp	r1, r24
    115c:	64 f5       	brge	.+88     	; 0x11b6 <MC1_mainOptions+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115e:	fe 01       	movw	r30, r28
    1160:	ed 5b       	subi	r30, 0xBD	; 189
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	60 81       	ld	r22, Z
    1166:	71 81       	ldd	r23, Z+1	; 0x01
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e af       	std	Y+62, r25	; 0x3e
    118a:	8d af       	std	Y+61, r24	; 0x3d
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <MC1_mainOptions+0x36c>
    118e:	89 e1       	ldi	r24, 0x19	; 25
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c af       	std	Y+60, r25	; 0x3c
    1194:	8b af       	std	Y+59, r24	; 0x3b
    1196:	8b ad       	ldd	r24, Y+59	; 0x3b
    1198:	9c ad       	ldd	r25, Y+60	; 0x3c
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <MC1_mainOptions+0x35a>
    119e:	9c af       	std	Y+60, r25	; 0x3c
    11a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    11a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e af       	std	Y+62, r25	; 0x3e
    11aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <MC1_mainOptions+0x34e>
    11b4:	16 c0       	rjmp	.+44     	; 0x11e2 <MC1_mainOptions+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	fe 01       	movw	r30, r28
    11b8:	ff 96       	adiw	r30, 0x3f	; 63
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e af       	std	Y+62, r25	; 0x3e
    11cc:	8d af       	std	Y+61, r24	; 0x3d
    11ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    11d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    11d2:	9a af       	std	Y+58, r25	; 0x3a
    11d4:	89 af       	std	Y+57, r24	; 0x39
    11d6:	89 ad       	ldd	r24, Y+57	; 0x39
    11d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <MC1_mainOptions+0x39a>
    11de:	9a af       	std	Y+58, r25	; 0x3a
    11e0:	89 af       	std	Y+57, r24	; 0x39
    	  {
    		  _delay_ms(2000);
    		  UART_sendByte(KEYPAD_getPressedKey());
    11e2:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <KEYPAD_getPressedKey>
    11e6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
    		  LCD_displayCharacter('*');
    11ea:	8a e2       	ldi	r24, 0x2A	; 42
    11ec:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayCharacter>
    	  }
    	  LCD_clearScreen();
    	  LCD_displayString("Enter Password");
    	  LCD_moveCursor(1,0);
    	  UART_sendByte(CHECK);
    	  for(uint8 index =0; index<NUM_DIGITS ; index++)
    11f0:	de 01       	movw	r26, r28
    11f2:	a9 5a       	subi	r26, 0xA9	; 169
    11f4:	bf 4f       	sbci	r27, 0xFF	; 255
    11f6:	fe 01       	movw	r30, r28
    11f8:	e9 5a       	subi	r30, 0xA9	; 169
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	8c 93       	st	X, r24
    1202:	fe 01       	movw	r30, r28
    1204:	e9 5a       	subi	r30, 0xA9	; 169
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	85 30       	cpi	r24, 0x05	; 5
    120c:	08 f4       	brcc	.+2      	; 0x1210 <MC1_mainOptions+0x3d0>
    120e:	64 cf       	rjmp	.-312    	; 0x10d8 <MC1_mainOptions+0x298>
    		  _delay_ms(2000);
    		  UART_sendByte(KEYPAD_getPressedKey());
    		  LCD_displayCharacter('*');

    	  }
    	  condition = UART_recieveByte();
    1210:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <UART_recieveByte>
    1214:	fe 01       	movw	r30, r28
    1216:	e7 5a       	subi	r30, 0xA7	; 167
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 83       	st	Z, r24
    	  counter++; // increment the counter each time there is a mismatch detected
    121c:	de 01       	movw	r26, r28
    121e:	a5 5a       	subi	r26, 0xA5	; 165
    1220:	bf 4f       	sbci	r27, 0xFF	; 255
    1222:	fe 01       	movw	r30, r28
    1224:	e5 5a       	subi	r30, 0xA5	; 165
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 81       	ld	r24, Z
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	8c 93       	st	X, r24
      }
      /* a variable that receives a flag from MC2 that identifies either
       * the password entered is correct (TRUE) or not correct (FALSE)
       */
      uint8 condition = UART_recieveByte() ;
      while( condition == FALSE )
    122e:	fe 01       	movw	r30, r28
    1230:	e7 5a       	subi	r30, 0xA7	; 167
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 81       	ld	r24, Z
    1236:	88 23       	and	r24, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <MC1_mainOptions+0x3fc>
    123a:	15 cf       	rjmp	.-470    	; 0x1066 <MC1_mainOptions+0x226>

    	  }
    	  condition = UART_recieveByte();
    	  counter++; // increment the counter each time there is a mismatch detected
      }
      if(condition == TRUE)
    123c:	fe 01       	movw	r30, r28
    123e:	e7 5a       	subi	r30, 0xA7	; 167
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	80 81       	ld	r24, Z
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	09 f0       	breq	.+2      	; 0x124a <MC1_mainOptions+0x40a>
    1248:	85 c2       	rjmp	.+1290   	; 0x1754 <MC1_mainOptions+0x914>
      {
    	  /* Send OPEN_GATE flag to MC2 so it generates the function that opens the gate */
    	  UART_sendByte(OPEN_GATE);
    124a:	8f e4       	ldi	r24, 0x4F	; 79
    124c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
    	  LCD_clearScreen();
    1250:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
    	  LCD_displayString("Gate Opening");
    1254:	82 eb       	ldi	r24, 0xB2	; 178
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    	  Timer0_init(&Timer0_config);
    125c:	87 ef       	ldi	r24, 0xF7	; 247
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Timer0_init>
    	  Timer0_setCallBack(MC1_timer0Counter);
    1264:	86 eb       	ldi	r24, 0xB6	; 182
    1266:	9b e0       	ldi	r25, 0x0B	; 11
    1268:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <Timer0_setCallBack>
    	  /* F(timer) = 8 MHZ / 1024 = 7.8125 KHz
    	   * T(timer) = 1/F(timer) = 0.128 millisecond
    	   * T(overflow) = 256*0.128 = 32.768 millisecond
    	   * To count 15 seconds we need 459 interrupt (15/0.0327)
    	   */
    	  while(g_counter != 459){}
    126c:	80 91 02 01 	lds	r24, 0x0102
    1270:	90 91 03 01 	lds	r25, 0x0103
    1274:	f1 e0       	ldi	r31, 0x01	; 1
    1276:	8b 3c       	cpi	r24, 0xCB	; 203
    1278:	9f 07       	cpc	r25, r31
    127a:	c1 f7       	brne	.-16     	; 0x126c <MC1_mainOptions+0x42c>
    	  Timer0_deinit();
    127c:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_deinit>
    	  g_counter = 0 ;
    1280:	10 92 03 01 	sts	0x0103, r1
    1284:	10 92 02 01 	sts	0x0102, r1
    	  LCD_clearScreen();
    1288:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
    	  LCD_displayString("Gate Opened");
    128c:	8f eb       	ldi	r24, 0xBF	; 191
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    	  Timer0_init(&Timer0_config);
    1294:	87 ef       	ldi	r24, 0xF7	; 247
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Timer0_init>
    	  Timer0_setCallBack(MC1_timer0Counter);
    129c:	86 eb       	ldi	r24, 0xB6	; 182
    129e:	9b e0       	ldi	r25, 0x0B	; 11
    12a0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <Timer0_setCallBack>
    	  /* F(timer) = 8 MHZ / 1024 = 7.8125 KHz
    	   * T(timer) = 1/F(timer) = 0.128 millisecond
    	   * T(overflow) = 256*0.128 = 32.768 millisecond
    	   * To count 3 seconds we need 92 interrupt (3/0.0327)
    	   */
    	  while(g_counter != 92){}
    12a4:	80 91 02 01 	lds	r24, 0x0102
    12a8:	90 91 03 01 	lds	r25, 0x0103
    12ac:	8c 35       	cpi	r24, 0x5C	; 92
    12ae:	91 05       	cpc	r25, r1
    12b0:	c9 f7       	brne	.-14     	; 0x12a4 <MC1_mainOptions+0x464>
    	  Timer0_deinit();
    12b2:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_deinit>
    	  g_counter = 0 ;
    12b6:	10 92 03 01 	sts	0x0103, r1
    12ba:	10 92 02 01 	sts	0x0102, r1
    	  LCD_clearScreen();
    12be:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
    	  LCD_displayString("Gate Closing");
    12c2:	8b ec       	ldi	r24, 0xCB	; 203
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    	  Timer0_init(&Timer0_config);
    12ca:	87 ef       	ldi	r24, 0xF7	; 247
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <Timer0_init>
    	  Timer0_setCallBack(MC1_timer0Counter);
    12d2:	86 eb       	ldi	r24, 0xB6	; 182
    12d4:	9b e0       	ldi	r25, 0x0B	; 11
    12d6:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <Timer0_setCallBack>
    	  while(g_counter != 459){}
    12da:	80 91 02 01 	lds	r24, 0x0102
    12de:	90 91 03 01 	lds	r25, 0x0103
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	8b 3c       	cpi	r24, 0xCB	; 203
    12e6:	92 07       	cpc	r25, r18
    12e8:	c1 f7       	brne	.-16     	; 0x12da <MC1_mainOptions+0x49a>
    	  Timer0_deinit();
    12ea:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <Timer0_deinit>
    	  g_counter = 0 ;
    12ee:	10 92 03 01 	sts	0x0103, r1
    12f2:	10 92 02 01 	sts	0x0102, r1
    	  MC1_mainOptions();
    12f6:	0e 94 20 07 	call	0xe40	; 0xe40 <MC1_mainOptions>
    12fa:	2c c2       	rjmp	.+1112   	; 0x1754 <MC1_mainOptions+0x914>
      }

	}
	else if ( option == '-')
    12fc:	fe 01       	movw	r30, r28
    12fe:	e6 5a       	subi	r30, 0xA6	; 166
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	8d 32       	cpi	r24, 0x2D	; 45
    1306:	09 f0       	breq	.+2      	; 0x130a <MC1_mainOptions+0x4ca>
    1308:	ab c1       	rjmp	.+854    	; 0x1660 <MC1_mainOptions+0x820>
	{
	    uint8 condition = 0 ;
    130a:	fe 01       	movw	r30, r28
    130c:	ea 5a       	subi	r30, 0xAA	; 170
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	10 82       	st	Z, r1
		UART_sendByte(CHECK);
    1312:	83 e4       	ldi	r24, 0x43	; 67
    1314:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
		LCD_clearScreen();
    1318:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
		LCD_displayString("Enter Password");
    131c:	8b e9       	ldi	r24, 0x9B	; 155
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
		LCD_moveCursor(1,0);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>

		for(uint8 index =0; index<NUM_DIGITS ; index++)
    132c:	fe 01       	movw	r30, r28
    132e:	eb 5a       	subi	r30, 0xAB	; 171
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	10 82       	st	Z, r1
    1334:	82 c0       	rjmp	.+260    	; 0x143a <MC1_mainOptions+0x5fa>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	aa ef       	ldi	r26, 0xFA	; 250
    133c:	b4 e4       	ldi	r27, 0x44	; 68
    133e:	8d ab       	std	Y+53, r24	; 0x35
    1340:	9e ab       	std	Y+54, r25	; 0x36
    1342:	af ab       	std	Y+55, r26	; 0x37
    1344:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6d a9       	ldd	r22, Y+53	; 0x35
    1348:	7e a9       	ldd	r23, Y+54	; 0x36
    134a:	8f a9       	ldd	r24, Y+55	; 0x37
    134c:	98 ad       	ldd	r25, Y+56	; 0x38
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a e7       	ldi	r20, 0x7A	; 122
    1354:	53 e4       	ldi	r21, 0x43	; 67
    1356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	89 ab       	std	Y+49, r24	; 0x31
    1360:	9a ab       	std	Y+50, r25	; 0x32
    1362:	ab ab       	std	Y+51, r26	; 0x33
    1364:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1366:	69 a9       	ldd	r22, Y+49	; 0x31
    1368:	7a a9       	ldd	r23, Y+50	; 0x32
    136a:	8b a9       	ldd	r24, Y+51	; 0x33
    136c:	9c a9       	ldd	r25, Y+52	; 0x34
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <MC1_mainOptions+0x548>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	98 ab       	std	Y+48, r25	; 0x30
    1384:	8f a7       	std	Y+47, r24	; 0x2f
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <MC1_mainOptions+0x5c6>
	else if (__tmp > 65535)
    1388:	69 a9       	ldd	r22, Y+49	; 0x31
    138a:	7a a9       	ldd	r23, Y+50	; 0x32
    138c:	8b a9       	ldd	r24, Y+51	; 0x33
    138e:	9c a9       	ldd	r25, Y+52	; 0x34
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <MC1_mainOptions+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6d a9       	ldd	r22, Y+53	; 0x35
    13a2:	7e a9       	ldd	r23, Y+54	; 0x36
    13a4:	8f a9       	ldd	r24, Y+55	; 0x37
    13a6:	98 ad       	ldd	r25, Y+56	; 0x38
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	98 ab       	std	Y+48, r25	; 0x30
    13c6:	8f a7       	std	Y+47, r24	; 0x2f
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <MC1_mainOptions+0x5a8>
    13ca:	89 e1       	ldi	r24, 0x19	; 25
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	9e a7       	std	Y+46, r25	; 0x2e
    13d0:	8d a7       	std	Y+45, r24	; 0x2d
    13d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <MC1_mainOptions+0x596>
    13da:	9e a7       	std	Y+46, r25	; 0x2e
    13dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e0:	98 a9       	ldd	r25, Y+48	; 0x30
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	98 ab       	std	Y+48, r25	; 0x30
    13e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ea:	98 a9       	ldd	r25, Y+48	; 0x30
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <MC1_mainOptions+0x58a>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <MC1_mainOptions+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	69 a9       	ldd	r22, Y+49	; 0x31
    13f4:	7a a9       	ldd	r23, Y+50	; 0x32
    13f6:	8b a9       	ldd	r24, Y+51	; 0x33
    13f8:	9c a9       	ldd	r25, Y+52	; 0x34
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	98 ab       	std	Y+48, r25	; 0x30
    1404:	8f a7       	std	Y+47, r24	; 0x2f
    1406:	8f a5       	ldd	r24, Y+47	; 0x2f
    1408:	98 a9       	ldd	r25, Y+48	; 0x30
    140a:	9c a7       	std	Y+44, r25	; 0x2c
    140c:	8b a7       	std	Y+43, r24	; 0x2b
    140e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1410:	9c a5       	ldd	r25, Y+44	; 0x2c
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <MC1_mainOptions+0x5d2>
    1416:	9c a7       	std	Y+44, r25	; 0x2c
    1418:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(2000);
			UART_sendByte(KEYPAD_getPressedKey());
    141a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <KEYPAD_getPressedKey>
    141e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
			LCD_displayCharacter('*');
    1422:	8a e2       	ldi	r24, 0x2A	; 42
    1424:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayCharacter>
		UART_sendByte(CHECK);
		LCD_clearScreen();
		LCD_displayString("Enter Password");
		LCD_moveCursor(1,0);

		for(uint8 index =0; index<NUM_DIGITS ; index++)
    1428:	de 01       	movw	r26, r28
    142a:	ab 5a       	subi	r26, 0xAB	; 171
    142c:	bf 4f       	sbci	r27, 0xFF	; 255
    142e:	fe 01       	movw	r30, r28
    1430:	eb 5a       	subi	r30, 0xAB	; 171
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	80 81       	ld	r24, Z
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	8c 93       	st	X, r24
    143a:	fe 01       	movw	r30, r28
    143c:	eb 5a       	subi	r30, 0xAB	; 171
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 81       	ld	r24, Z
    1442:	85 30       	cpi	r24, 0x05	; 5
    1444:	08 f4       	brcc	.+2      	; 0x1448 <MC1_mainOptions+0x608>
    1446:	77 cf       	rjmp	.-274    	; 0x1336 <MC1_mainOptions+0x4f6>
		{
			_delay_ms(2000);
			UART_sendByte(KEYPAD_getPressedKey());
			LCD_displayCharacter('*');
		}
		condition = UART_recieveByte();
    1448:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <UART_recieveByte>
    144c:	fe 01       	movw	r30, r28
    144e:	ea 5a       	subi	r30, 0xAA	; 170
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 83       	st	Z, r24
		if(condition == FALSE)
    1454:	fe 01       	movw	r30, r28
    1456:	ea 5a       	subi	r30, 0xAA	; 170
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	80 81       	ld	r24, Z
    145c:	88 23       	and	r24, r24
    145e:	09 f0       	breq	.+2      	; 0x1462 <MC1_mainOptions+0x622>
    1460:	7b c0       	rjmp	.+246    	; 0x1558 <MC1_mainOptions+0x718>
		{
			LCD_clearScreen();
    1462:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
			LCD_displayString("Wrong Pass");
    1466:	88 ed       	ldi	r24, 0xD8	; 216
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	aa ef       	ldi	r26, 0xFA	; 250
    1474:	b4 e4       	ldi	r27, 0x44	; 68
    1476:	8f a3       	std	Y+39, r24	; 0x27
    1478:	98 a7       	std	Y+40, r25	; 0x28
    147a:	a9 a7       	std	Y+41, r26	; 0x29
    147c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147e:	6f a1       	ldd	r22, Y+39	; 0x27
    1480:	78 a5       	ldd	r23, Y+40	; 0x28
    1482:	89 a5       	ldd	r24, Y+41	; 0x29
    1484:	9a a5       	ldd	r25, Y+42	; 0x2a
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4a e7       	ldi	r20, 0x7A	; 122
    148c:	53 e4       	ldi	r21, 0x43	; 67
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8b a3       	std	Y+35, r24	; 0x23
    1498:	9c a3       	std	Y+36, r25	; 0x24
    149a:	ad a3       	std	Y+37, r26	; 0x25
    149c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    149e:	6b a1       	ldd	r22, Y+35	; 0x23
    14a0:	7c a1       	ldd	r23, Y+36	; 0x24
    14a2:	8d a1       	ldd	r24, Y+37	; 0x25
    14a4:	9e a1       	ldd	r25, Y+38	; 0x26
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <MC1_mainOptions+0x680>
		__ticks = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9a a3       	std	Y+34, r25	; 0x22
    14bc:	89 a3       	std	Y+33, r24	; 0x21
    14be:	3f c0       	rjmp	.+126    	; 0x153e <MC1_mainOptions+0x6fe>
	else if (__tmp > 65535)
    14c0:	6b a1       	ldd	r22, Y+35	; 0x23
    14c2:	7c a1       	ldd	r23, Y+36	; 0x24
    14c4:	8d a1       	ldd	r24, Y+37	; 0x25
    14c6:	9e a1       	ldd	r25, Y+38	; 0x26
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	57 e4       	ldi	r21, 0x47	; 71
    14d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	4c f5       	brge	.+82     	; 0x152a <MC1_mainOptions+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	6f a1       	ldd	r22, Y+39	; 0x27
    14da:	78 a5       	ldd	r23, Y+40	; 0x28
    14dc:	89 a5       	ldd	r24, Y+41	; 0x29
    14de:	9a a5       	ldd	r25, Y+42	; 0x2a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e2       	ldi	r20, 0x20	; 32
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9a a3       	std	Y+34, r25	; 0x22
    14fe:	89 a3       	std	Y+33, r24	; 0x21
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <MC1_mainOptions+0x6e0>
    1502:	89 e1       	ldi	r24, 0x19	; 25
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	98 a3       	std	Y+32, r25	; 0x20
    1508:	8f 8f       	std	Y+31, r24	; 0x1f
    150a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    150c:	98 a1       	ldd	r25, Y+32	; 0x20
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <MC1_mainOptions+0x6ce>
    1512:	98 a3       	std	Y+32, r25	; 0x20
    1514:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1516:	89 a1       	ldd	r24, Y+33	; 0x21
    1518:	9a a1       	ldd	r25, Y+34	; 0x22
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9a a3       	std	Y+34, r25	; 0x22
    151e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	89 a1       	ldd	r24, Y+33	; 0x21
    1522:	9a a1       	ldd	r25, Y+34	; 0x22
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f7       	brne	.-38     	; 0x1502 <MC1_mainOptions+0x6c2>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <MC1_mainOptions+0x712>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152a:	6b a1       	ldd	r22, Y+35	; 0x23
    152c:	7c a1       	ldd	r23, Y+36	; 0x24
    152e:	8d a1       	ldd	r24, Y+37	; 0x25
    1530:	9e a1       	ldd	r25, Y+38	; 0x26
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9a a3       	std	Y+34, r25	; 0x22
    153c:	89 a3       	std	Y+33, r24	; 0x21
    153e:	89 a1       	ldd	r24, Y+33	; 0x21
    1540:	9a a1       	ldd	r25, Y+34	; 0x22
    1542:	9e 8f       	std	Y+30, r25	; 0x1e
    1544:	8d 8f       	std	Y+29, r24	; 0x1d
    1546:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1548:	9e 8d       	ldd	r25, Y+30	; 0x1e
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <MC1_mainOptions+0x70a>
    154e:	9e 8f       	std	Y+30, r25	; 0x1e
    1550:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
			MC1_mainOptions();
    1552:	0e 94 20 07 	call	0xe40	; 0xe40 <MC1_mainOptions>
    1556:	79 c0       	rjmp	.+242    	; 0x164a <MC1_mainOptions+0x80a>
		}

		else if(condition == TRUE)
    1558:	fe 01       	movw	r30, r28
    155a:	ea 5a       	subi	r30, 0xAA	; 170
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	80 81       	ld	r24, Z
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	09 f0       	breq	.+2      	; 0x1566 <MC1_mainOptions+0x726>
    1564:	72 c0       	rjmp	.+228    	; 0x164a <MC1_mainOptions+0x80a>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	aa ef       	ldi	r26, 0xFA	; 250
    156c:	b4 e4       	ldi	r27, 0x44	; 68
    156e:	89 8f       	std	Y+25, r24	; 0x19
    1570:	9a 8f       	std	Y+26, r25	; 0x1a
    1572:	ab 8f       	std	Y+27, r26	; 0x1b
    1574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	69 8d       	ldd	r22, Y+25	; 0x19
    1578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8d 8b       	std	Y+21, r24	; 0x15
    1590:	9e 8b       	std	Y+22, r25	; 0x16
    1592:	af 8b       	std	Y+23, r26	; 0x17
    1594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <MC1_mainOptions+0x778>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9c 8b       	std	Y+20, r25	; 0x14
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <MC1_mainOptions+0x7f6>
	else if (__tmp > 65535)
    15b8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ba:	7e 89       	ldd	r23, Y+22	; 0x16
    15bc:	8f 89       	ldd	r24, Y+23	; 0x17
    15be:	98 8d       	ldd	r25, Y+24	; 0x18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <MC1_mainOptions+0x7e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	69 8d       	ldd	r22, Y+25	; 0x19
    15d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9c 8b       	std	Y+20, r25	; 0x14
    15f6:	8b 8b       	std	Y+19, r24	; 0x13
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <MC1_mainOptions+0x7d8>
    15fa:	89 e1       	ldi	r24, 0x19	; 25
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9a 8b       	std	Y+18, r25	; 0x12
    1600:	89 8b       	std	Y+17, r24	; 0x11
    1602:	89 89       	ldd	r24, Y+17	; 0x11
    1604:	9a 89       	ldd	r25, Y+18	; 0x12
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <MC1_mainOptions+0x7c6>
    160a:	9a 8b       	std	Y+18, r25	; 0x12
    160c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	8b 89       	ldd	r24, Y+19	; 0x13
    1610:	9c 89       	ldd	r25, Y+20	; 0x14
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	8b 89       	ldd	r24, Y+19	; 0x13
    161a:	9c 89       	ldd	r25, Y+20	; 0x14
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <MC1_mainOptions+0x7ba>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <MC1_mainOptions+0x80a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6d 89       	ldd	r22, Y+21	; 0x15
    1624:	7e 89       	ldd	r23, Y+22	; 0x16
    1626:	8f 89       	ldd	r24, Y+23	; 0x17
    1628:	98 8d       	ldd	r25, Y+24	; 0x18
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9c 8b       	std	Y+20, r25	; 0x14
    1634:	8b 8b       	std	Y+19, r24	; 0x13
    1636:	8b 89       	ldd	r24, Y+19	; 0x13
    1638:	9c 89       	ldd	r25, Y+20	; 0x14
    163a:	98 8b       	std	Y+16, r25	; 0x10
    163c:	8f 87       	std	Y+15, r24	; 0x0f
    163e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1640:	98 89       	ldd	r25, Y+16	; 0x10
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <MC1_mainOptions+0x802>
    1646:	98 8b       	std	Y+16, r25	; 0x10
    1648:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		do
		{
			MC1_askForPass();
    164a:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_askForPass>
		}
		while(!( MC1_matchingCheck() ) ) ;
    164e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MC1_matchingCheck>
    1652:	88 23       	and	r24, r24
    1654:	d1 f3       	breq	.-12     	; 0x164a <MC1_mainOptions+0x80a>

		MC1_sendNewPassword();
    1656:	0e 94 03 07 	call	0xe06	; 0xe06 <MC1_sendNewPassword>
		MC1_mainOptions();
    165a:	0e 94 20 07 	call	0xe40	; 0xe40 <MC1_mainOptions>
    165e:	7a c0       	rjmp	.+244    	; 0x1754 <MC1_mainOptions+0x914>
	}
	/* in case the user pressed on wrong keys */
	else
	{
		LCD_clearScreen();
    1660:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	    LCD_displayString("Wrong Input");
    1664:	83 ee       	ldi	r24, 0xE3	; 227
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	aa ef       	ldi	r26, 0xFA	; 250
    1672:	b4 e4       	ldi	r27, 0x44	; 68
    1674:	8b 87       	std	Y+11, r24	; 0x0b
    1676:	9c 87       	std	Y+12, r25	; 0x0c
    1678:	ad 87       	std	Y+13, r26	; 0x0d
    167a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a e7       	ldi	r20, 0x7A	; 122
    168a:	53 e4       	ldi	r21, 0x43	; 67
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8f 83       	std	Y+7, r24	; 0x07
    1696:	98 87       	std	Y+8, r25	; 0x08
    1698:	a9 87       	std	Y+9, r26	; 0x09
    169a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <MC1_mainOptions+0x87e>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	8d 83       	std	Y+5, r24	; 0x05
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <MC1_mainOptions+0x8fc>
	else if (__tmp > 65535)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <MC1_mainOptions+0x8e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16da:	8d 85       	ldd	r24, Y+13	; 0x0d
    16dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <MC1_mainOptions+0x8de>
    1700:	89 e1       	ldi	r24, 0x19	; 25
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9c 83       	std	Y+4, r25	; 0x04
    1706:	8b 83       	std	Y+3, r24	; 0x03
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <MC1_mainOptions+0x8cc>
    1710:	9c 83       	std	Y+4, r25	; 0x04
    1712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <MC1_mainOptions+0x8c0>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <MC1_mainOptions+0x910>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <MC1_mainOptions+0x908>
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(2000);
		MC1_mainOptions();
    1750:	0e 94 20 07 	call	0xe40	; 0xe40 <MC1_mainOptions>
	}

}
    1754:	c5 5a       	subi	r28, 0xA5	; 165
    1756:	df 4f       	sbci	r29, 0xFF	; 255
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <MC1_timer0Counter>:
 * 3. we turn off Timer0 interrupts when we reach the time needed and that depends on the function
 *    that opens Timer0 interrupts
 */

void MC1_timer0Counter(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	g_counter++;
    1774:	80 91 02 01 	lds	r24, 0x0102
    1778:	90 91 03 01 	lds	r25, 0x0103
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	90 93 03 01 	sts	0x0103, r25
    1782:	80 93 02 01 	sts	0x0102, r24
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <main>:

int main(void)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	2c 97       	sbiw	r28, 0x0c	; 12
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
  LCD_init();
    17a0:	0e 94 37 10 	call	0x206e	; 0x206e <LCD_init>
  /* 1. Size of the character = 8 bits
   * 2. Disable parity check
   * 3. Use one stop bit
   * 4. choose 9600 bps baud rate
   */
  UART_ConfigType UART_Configuration = { EIGHT_BIT , DISABLED , ONE_BIT , 9600 } ;
    17a4:	ce 01       	movw	r24, r28
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	99 87       	std	Y+9, r25	; 0x09
    17aa:	88 87       	std	Y+8, r24	; 0x08
    17ac:	eb ef       	ldi	r30, 0xFB	; 251
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	fb 87       	std	Y+11, r31	; 0x0b
    17b2:	ea 87       	std	Y+10, r30	; 0x0a
    17b4:	f7 e0       	ldi	r31, 0x07	; 7
    17b6:	fc 87       	std	Y+12, r31	; 0x0c
    17b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    17ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    17bc:	00 80       	ld	r0, Z
    17be:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	9b 87       	std	Y+11, r25	; 0x0b
    17c6:	8a 87       	std	Y+10, r24	; 0x0a
    17c8:	e8 85       	ldd	r30, Y+8	; 0x08
    17ca:	f9 85       	ldd	r31, Y+9	; 0x09
    17cc:	00 82       	st	Z, r0
    17ce:	88 85       	ldd	r24, Y+8	; 0x08
    17d0:	99 85       	ldd	r25, Y+9	; 0x09
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	99 87       	std	Y+9, r25	; 0x09
    17d6:	88 87       	std	Y+8, r24	; 0x08
    17d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	9c 87       	std	Y+12, r25	; 0x0c
    17de:	ec 85       	ldd	r30, Y+12	; 0x0c
    17e0:	ee 23       	and	r30, r30
    17e2:	51 f7       	brne	.-44     	; 0x17b8 <main+0x2c>
  UART_init(&UART_Configuration);
    17e4:	ce 01       	movw	r24, r28
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_init>
  while(1)
  {

	  do
	  {
        MC1_askForPass();
    17ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <MC1_askForPass>
	  }
	  while(!( MC1_matchingCheck() ) ) ; // In case there is a mismatch between 1st & 2nd time we repeat the function
    17f0:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <MC1_matchingCheck>
    17f4:	88 23       	and	r24, r24
    17f6:	d1 f3       	breq	.-12     	; 0x17ec <main+0x60>
      /* Store new password */
	  MC1_sendNewPassword();
    17f8:	0e 94 03 07 	call	0xe06	; 0xe06 <MC1_sendNewPassword>
	  /* Print on LCD the main options (open gate / change password) */
	  MC1_mainOptions();
    17fc:	0e 94 20 07 	call	0xe40	; 0xe40 <MC1_mainOptions>
    1800:	f5 cf       	rjmp	.-22     	; 0x17ec <main+0x60>

00001802 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <GPIO_setupPinDirection+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <GPIO_setupPinDirection+0x8>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	6a 83       	std	Y+2, r22	; 0x02
    1814:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	88 30       	cpi	r24, 0x08	; 8
    181a:	08 f0       	brcs	.+2      	; 0x181e <GPIO_setupPinDirection+0x1c>
    181c:	d5 c0       	rjmp	.+426    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	08 f0       	brcs	.+2      	; 0x1826 <GPIO_setupPinDirection+0x24>
    1824:	d1 c0       	rjmp	.+418    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3d 83       	std	Y+5, r19	; 0x05
    182e:	2c 83       	std	Y+4, r18	; 0x04
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <GPIO_setupPinDirection+0x3a>
    183a:	43 c0       	rjmp	.+134    	; 0x18c2 <GPIO_setupPinDirection+0xc0>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	2c f4       	brge	.+10     	; 0x1850 <GPIO_setupPinDirection+0x4e>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	71 f0       	breq	.+28     	; 0x186a <GPIO_setupPinDirection+0x68>
    184e:	bc c0       	rjmp	.+376    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <GPIO_setupPinDirection+0x5a>
    185a:	5f c0       	rjmp	.+190    	; 0x191a <GPIO_setupPinDirection+0x118>
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <GPIO_setupPinDirection+0x66>
    1866:	85 c0       	rjmp	.+266    	; 0x1972 <GPIO_setupPinDirection+0x170>
    1868:	af c0       	rjmp	.+350    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	a1 f4       	brne	.+40     	; 0x1898 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1870:	aa e3       	ldi	r26, 0x3A	; 58
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ea e3       	ldi	r30, 0x3A	; 58
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <GPIO_setupPinDirection+0x8c>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <GPIO_setupPinDirection+0x88>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	98 c0       	rjmp	.+304    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1898:	aa e3       	ldi	r26, 0x3A	; 58
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ea e3       	ldi	r30, 0x3A	; 58
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <GPIO_setupPinDirection+0xb4>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <GPIO_setupPinDirection+0xb0>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	83 c0       	rjmp	.+262    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	a1 f4       	brne	.+40     	; 0x18f0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18c8:	a7 e3       	ldi	r26, 0x37	; 55
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e7 e3       	ldi	r30, 0x37	; 55
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <GPIO_setupPinDirection+0xe4>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <GPIO_setupPinDirection+0xe0>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	6c c0       	rjmp	.+216    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18f0:	a7 e3       	ldi	r26, 0x37	; 55
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e7 e3       	ldi	r30, 0x37	; 55
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_setupPinDirection+0x10c>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_setupPinDirection+0x108>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	57 c0       	rjmp	.+174    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	a1 f4       	brne	.+40     	; 0x1948 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1920:	a4 e3       	ldi	r26, 0x34	; 52
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e4 e3       	ldi	r30, 0x34	; 52
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_setupPinDirection+0x13c>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_setupPinDirection+0x138>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	40 c0       	rjmp	.+128    	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1948:	a4 e3       	ldi	r26, 0x34	; 52
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e4 e3       	ldi	r30, 0x34	; 52
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_setupPinDirection+0x164>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_setupPinDirection+0x160>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	2b c0       	rjmp	.+86     	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	a1 f4       	brne	.+40     	; 0x19a0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1978:	a1 e3       	ldi	r26, 0x31	; 49
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e1 e3       	ldi	r30, 0x31	; 49
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <GPIO_setupPinDirection+0x194>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <GPIO_setupPinDirection+0x190>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19a0:	a1 e3       	ldi	r26, 0x31	; 49
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e1 e3       	ldi	r30, 0x31	; 49
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <GPIO_setupPinDirection+0x1bc>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <GPIO_setupPinDirection+0x1b8>
    19c2:	80 95       	com	r24
    19c4:	84 23       	and	r24, r20
    19c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <GPIO_writePin+0x6>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <GPIO_writePin+0x8>
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	6a 83       	std	Y+2, r22	; 0x02
    19ea:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	88 30       	cpi	r24, 0x08	; 8
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <GPIO_writePin+0x1c>
    19f2:	d5 c0       	rjmp	.+426    	; 0x1b9e <GPIO_writePin+0x1c6>
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	84 30       	cpi	r24, 0x04	; 4
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <GPIO_writePin+0x24>
    19fa:	d1 c0       	rjmp	.+418    	; 0x1b9e <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch (port_num)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	3d 83       	std	Y+5, r19	; 0x05
    1a04:	2c 83       	std	Y+4, r18	; 0x04
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <GPIO_writePin+0x3a>
    1a10:	43 c0       	rjmp	.+134    	; 0x1a98 <GPIO_writePin+0xc0>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	2c f4       	brge	.+10     	; 0x1a26 <GPIO_writePin+0x4e>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	71 f0       	breq	.+28     	; 0x1a40 <GPIO_writePin+0x68>
    1a24:	bc c0       	rjmp	.+376    	; 0x1b9e <GPIO_writePin+0x1c6>
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	22 30       	cpi	r18, 0x02	; 2
    1a2c:	31 05       	cpc	r19, r1
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <GPIO_writePin+0x5a>
    1a30:	5f c0       	rjmp	.+190    	; 0x1af0 <GPIO_writePin+0x118>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	83 30       	cpi	r24, 0x03	; 3
    1a38:	91 05       	cpc	r25, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <GPIO_writePin+0x66>
    1a3c:	85 c0       	rjmp	.+266    	; 0x1b48 <GPIO_writePin+0x170>
    1a3e:	af c0       	rjmp	.+350    	; 0x1b9e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	a1 f4       	brne	.+40     	; 0x1a6e <GPIO_writePin+0x96>
						{
							SET_BIT(PORTA,pin_num);
    1a46:	ab e3       	ldi	r26, 0x3B	; 59
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <GPIO_writePin+0x8c>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <GPIO_writePin+0x88>
    1a68:	84 2b       	or	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	98 c0       	rjmp	.+304    	; 0x1b9e <GPIO_writePin+0x1c6>
						}
						else
						{
							CLEAR_BIT(PORTA,pin_num);
    1a6e:	ab e3       	ldi	r26, 0x3B	; 59
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	eb e3       	ldi	r30, 0x3B	; 59
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <GPIO_writePin+0xb4>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <GPIO_writePin+0xb0>
    1a90:	80 95       	com	r24
    1a92:	84 23       	and	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	83 c0       	rjmp	.+262    	; 0x1b9e <GPIO_writePin+0x1c6>
						}
			break;
		case PORTB_ID :
					if(value == LOGIC_HIGH)
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	a1 f4       	brne	.+40     	; 0x1ac6 <GPIO_writePin+0xee>
								{
									SET_BIT(PORTB,pin_num);
    1a9e:	a8 e3       	ldi	r26, 0x38	; 56
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e8 e3       	ldi	r30, 0x38	; 56
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <GPIO_writePin+0xe4>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <GPIO_writePin+0xe0>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	6c c0       	rjmp	.+216    	; 0x1b9e <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTB,pin_num);
    1ac6:	a8 e3       	ldi	r26, 0x38	; 56
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e8 e3       	ldi	r30, 0x38	; 56
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <GPIO_writePin+0x10c>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <GPIO_writePin+0x108>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	57 c0       	rjmp	.+174    	; 0x1b9e <GPIO_writePin+0x1c6>
								}
					break;
		case PORTC_ID :
					if(value == LOGIC_HIGH)
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	a1 f4       	brne	.+40     	; 0x1b1e <GPIO_writePin+0x146>
								{
									SET_BIT(PORTC,pin_num);
    1af6:	a5 e3       	ldi	r26, 0x35	; 53
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e3       	ldi	r30, 0x35	; 53
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <GPIO_writePin+0x13c>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <GPIO_writePin+0x138>
    1b18:	84 2b       	or	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	40 c0       	rjmp	.+128    	; 0x1b9e <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTC,pin_num);
    1b1e:	a5 e3       	ldi	r26, 0x35	; 53
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e3       	ldi	r30, 0x35	; 53
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <GPIO_writePin+0x164>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <GPIO_writePin+0x160>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
    1b46:	2b c0       	rjmp	.+86     	; 0x1b9e <GPIO_writePin+0x1c6>
								}
					break;
		case PORTD_ID :
					if(value == LOGIC_HIGH)
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	a1 f4       	brne	.+40     	; 0x1b76 <GPIO_writePin+0x19e>
								{
									SET_BIT(PORTD,pin_num);
    1b4e:	a2 e3       	ldi	r26, 0x32	; 50
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e2 e3       	ldi	r30, 0x32	; 50
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <GPIO_writePin+0x194>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <GPIO_writePin+0x190>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTD,pin_num);
    1b76:	a2 e3       	ldi	r26, 0x32	; 50
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e2 e3       	ldi	r30, 0x32	; 50
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <GPIO_writePin+0x1bc>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <GPIO_writePin+0x1b8>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
								}
					break;
		}
	}

}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <GPIO_readPin+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <GPIO_readPin+0x8>
    1bb6:	0f 92       	push	r0
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
    1bbe:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    1bc0:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	88 30       	cpi	r24, 0x08	; 8
    1bc6:	08 f0       	brcs	.+2      	; 0x1bca <GPIO_readPin+0x1c>
    1bc8:	84 c0       	rjmp	.+264    	; 0x1cd2 <GPIO_readPin+0x124>
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	84 30       	cpi	r24, 0x04	; 4
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <GPIO_readPin+0x24>
    1bd0:	80 c0       	rjmp	.+256    	; 0x1cd2 <GPIO_readPin+0x124>
			{
				/* Do nothing */
			}
	else
	{
		switch(port_num)
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	3d 83       	std	Y+5, r19	; 0x05
    1bda:	2c 83       	std	Y+4, r18	; 0x04
    1bdc:	4c 81       	ldd	r20, Y+4	; 0x04
    1bde:	5d 81       	ldd	r21, Y+5	; 0x05
    1be0:	41 30       	cpi	r20, 0x01	; 1
    1be2:	51 05       	cpc	r21, r1
    1be4:	79 f1       	breq	.+94     	; 0x1c44 <GPIO_readPin+0x96>
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	91 05       	cpc	r25, r1
    1bee:	34 f4       	brge	.+12     	; 0x1bfc <GPIO_readPin+0x4e>
    1bf0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf4:	21 15       	cp	r18, r1
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	69 f0       	breq	.+26     	; 0x1c14 <GPIO_readPin+0x66>
    1bfa:	6b c0       	rjmp	.+214    	; 0x1cd2 <GPIO_readPin+0x124>
    1bfc:	4c 81       	ldd	r20, Y+4	; 0x04
    1bfe:	5d 81       	ldd	r21, Y+5	; 0x05
    1c00:	42 30       	cpi	r20, 0x02	; 2
    1c02:	51 05       	cpc	r21, r1
    1c04:	b9 f1       	breq	.+110    	; 0x1c74 <GPIO_readPin+0xc6>
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <GPIO_readPin+0x64>
    1c10:	49 c0       	rjmp	.+146    	; 0x1ca4 <GPIO_readPin+0xf6>
    1c12:	5f c0       	rjmp	.+190    	; 0x1cd2 <GPIO_readPin+0x124>
		{
		case PORTA_ID : if(BIT_IS_SET(PINA,pin_num))
    1c14:	e9 e3       	ldi	r30, 0x39	; 57
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_readPin+0x7e>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_readPin+0x7a>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	90 70       	andi	r25, 0x00	; 0
    1c36:	88 23       	and	r24, r24
    1c38:	19 f0       	breq	.+6      	; 0x1c40 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH ;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	49 c0       	rjmp	.+146    	; 0x1cd2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1c40:	19 82       	std	Y+1, r1	; 0x01
    1c42:	47 c0       	rjmp	.+142    	; 0x1cd2 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID : if(BIT_IS_SET(PINB,pin_num))
    1c44:	e6 e3       	ldi	r30, 0x36	; 54
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a9 01       	movw	r20, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <GPIO_readPin+0xae>
    1c58:	55 95       	asr	r21
    1c5a:	47 95       	ror	r20
    1c5c:	8a 95       	dec	r24
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <GPIO_readPin+0xaa>
    1c60:	ca 01       	movw	r24, r20
    1c62:	81 70       	andi	r24, 0x01	; 1
    1c64:	90 70       	andi	r25, 0x00	; 0
    1c66:	88 23       	and	r24, r24
    1c68:	19 f0       	breq	.+6      	; 0x1c70 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH ;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	31 c0       	rjmp	.+98     	; 0x1cd2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1c70:	19 82       	std	Y+1, r1	; 0x01
    1c72:	2f c0       	rjmp	.+94     	; 0x1cd2 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID : if(BIT_IS_SET(PINC,pin_num))
    1c74:	e3 e3       	ldi	r30, 0x33	; 51
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a9 01       	movw	r20, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <GPIO_readPin+0xde>
    1c88:	55 95       	asr	r21
    1c8a:	47 95       	ror	r20
    1c8c:	8a 95       	dec	r24
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <GPIO_readPin+0xda>
    1c90:	ca 01       	movw	r24, r20
    1c92:	81 70       	andi	r24, 0x01	; 1
    1c94:	90 70       	andi	r25, 0x00	; 0
    1c96:	88 23       	and	r24, r24
    1c98:	19 f0       	breq	.+6      	; 0x1ca0 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH ;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	19 c0       	rjmp	.+50     	; 0x1cd2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	17 c0       	rjmp	.+46     	; 0x1cd2 <GPIO_readPin+0x124>
		}
		break;

		case PORTD_ID : if(BIT_IS_SET(PIND,pin_num))
    1ca4:	e0 e3       	ldi	r30, 0x30	; 48
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_readPin+0x10e>
    1cb8:	55 95       	asr	r21
    1cba:	47 95       	ror	r20
    1cbc:	8a 95       	dec	r24
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_readPin+0x10a>
    1cc0:	ca 01       	movw	r24, r20
    1cc2:	81 70       	andi	r24, 0x01	; 1
    1cc4:	90 70       	andi	r25, 0x00	; 0
    1cc6:	88 23       	and	r24, r24
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH ;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1cd0:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
    return pin_value ;
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <GPIO_setupPortDirection+0x6>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <GPIO_setupPortDirection+0x8>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	90 f5       	brcc	.+100    	; 0x1d5e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	3c 83       	std	Y+4, r19	; 0x04
    1d02:	2b 83       	std	Y+3, r18	; 0x03
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	d1 f0       	breq	.+52     	; 0x1d42 <GPIO_setupPortDirection+0x5e>
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	31 05       	cpc	r19, r1
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <GPIO_setupPortDirection+0x3e>
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	61 f0       	breq	.+24     	; 0x1d38 <GPIO_setupPortDirection+0x54>
    1d20:	1e c0       	rjmp	.+60     	; 0x1d5e <GPIO_setupPortDirection+0x7a>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	81 f0       	breq	.+32     	; 0x1d4c <GPIO_setupPortDirection+0x68>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	91 05       	cpc	r25, r1
    1d34:	81 f0       	breq	.+32     	; 0x1d56 <GPIO_setupPortDirection+0x72>
    1d36:	13 c0       	rjmp	.+38     	; 0x1d5e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d38:	ea e3       	ldi	r30, 0x3A	; 58
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	80 83       	st	Z, r24
    1d40:	0e c0       	rjmp	.+28     	; 0x1d5e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d42:	e7 e3       	ldi	r30, 0x37	; 55
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	80 83       	st	Z, r24
    1d4a:	09 c0       	rjmp	.+18     	; 0x1d5e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d4c:	e4 e3       	ldi	r30, 0x34	; 52
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	80 83       	st	Z, r24
    1d54:	04 c0       	rjmp	.+8      	; 0x1d5e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d56:	e1 e3       	ldi	r30, 0x31	; 49
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	08 95       	ret

00001d6c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num , uint8 value)
{
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <GPIO_writePort+0x6>
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <GPIO_writePort+0x8>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	84 30       	cpi	r24, 0x04	; 4
    1d80:	90 f5       	brcc	.+100    	; 0x1de6 <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
	else
	{
	  switch (port_num)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	3c 83       	std	Y+4, r19	; 0x04
    1d8a:	2b 83       	std	Y+3, r18	; 0x03
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	91 05       	cpc	r25, r1
    1d94:	d1 f0       	breq	.+52     	; 0x1dca <GPIO_writePort+0x5e>
    1d96:	2b 81       	ldd	r18, Y+3	; 0x03
    1d98:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <GPIO_writePort+0x3e>
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <GPIO_writePort+0x54>
    1da8:	1e c0       	rjmp	.+60     	; 0x1de6 <GPIO_writePort+0x7a>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	81 f0       	breq	.+32     	; 0x1dd4 <GPIO_writePort+0x68>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	91 05       	cpc	r25, r1
    1dbc:	81 f0       	breq	.+32     	; 0x1dde <GPIO_writePort+0x72>
    1dbe:	13 c0       	rjmp	.+38     	; 0x1de6 <GPIO_writePort+0x7a>
	  {
	  case PORTA_ID : PORTA = value;
    1dc0:	eb e3       	ldi	r30, 0x3B	; 59
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	80 83       	st	Z, r24
    1dc8:	0e c0       	rjmp	.+28     	; 0x1de6 <GPIO_writePort+0x7a>
	  break;
	  case PORTB_ID : PORTB = value;
    1dca:	e8 e3       	ldi	r30, 0x38	; 56
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	80 83       	st	Z, r24
    1dd2:	09 c0       	rjmp	.+18     	; 0x1de6 <GPIO_writePort+0x7a>
	  break;
	  case PORTC_ID : PORTC = value;
    1dd4:	e5 e3       	ldi	r30, 0x35	; 53
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	80 83       	st	Z, r24
    1ddc:	04 c0       	rjmp	.+8      	; 0x1de6 <GPIO_writePort+0x7a>
	  break;
	  case PORTD_ID : PORTD = value;
    1dde:	e2 e3       	ldi	r30, 0x32	; 50
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24
	  break;

	  }
	}
}
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <GPIO_readPort+0x6>
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <GPIO_readPort+0x8>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e02:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	90 f5       	brcc	.+100    	; 0x1e6e <GPIO_readPort+0x7a>
				/* Do nothing */
			}

	else
	{
		switch (port_num)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3c 83       	std	Y+4, r19	; 0x04
    1e12:	2b 83       	std	Y+3, r18	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	81 30       	cpi	r24, 0x01	; 1
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	d1 f0       	breq	.+52     	; 0x1e52 <GPIO_readPort+0x5e>
    1e1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e20:	3c 81       	ldd	r19, Y+4	; 0x04
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	31 05       	cpc	r19, r1
    1e26:	2c f4       	brge	.+10     	; 0x1e32 <GPIO_readPort+0x3e>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	61 f0       	breq	.+24     	; 0x1e48 <GPIO_readPort+0x54>
    1e30:	1e c0       	rjmp	.+60     	; 0x1e6e <GPIO_readPort+0x7a>
    1e32:	2b 81       	ldd	r18, Y+3	; 0x03
    1e34:	3c 81       	ldd	r19, Y+4	; 0x04
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	81 f0       	breq	.+32     	; 0x1e5c <GPIO_readPort+0x68>
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	83 30       	cpi	r24, 0x03	; 3
    1e42:	91 05       	cpc	r25, r1
    1e44:	81 f0       	breq	.+32     	; 0x1e66 <GPIO_readPort+0x72>
    1e46:	13 c0       	rjmp	.+38     	; 0x1e6e <GPIO_readPort+0x7a>
		{
		case PORTA_ID : value = PINA;
    1e48:	e9 e3       	ldi	r30, 0x39	; 57
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <GPIO_readPort+0x7a>
		break;
		case PORTB_ID : value = PINB;
    1e52:	e6 e3       	ldi	r30, 0x36	; 54
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	09 c0       	rjmp	.+18     	; 0x1e6e <GPIO_readPort+0x7a>
		break;
		case PORTC_ID : value = PINC;
    1e5c:	e3 e3       	ldi	r30, 0x33	; 51
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <GPIO_readPort+0x7a>
		break;
		case PORTD_ID : value = PIND;
    1e66:	e0 e3       	ldi	r30, 0x30	; 48
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
	}
  return value ;
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <KEYPAD_getPressedKey+0x6>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1e8a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1e8c:	1b 82       	std	Y+3, r1	; 0x03
    1e8e:	43 c0       	rjmp	.+134    	; 0x1f16 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	98 2f       	mov	r25, r24
    1e9c:	9c 5f       	subi	r25, 0xFC	; 252
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	69 2f       	mov	r22, r25
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 01 0c 	call	0x1802	; 0x1802 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 01       	movw	r18, r24
    1eb0:	2c 5f       	subi	r18, 0xFC	; 252
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <KEYPAD_getPressedKey+0x40>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	2a 95       	dec	r18
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <KEYPAD_getPressedKey+0x3c>
    1ec2:	80 95       	com	r24
    1ec4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	69 81       	ldd	r22, Y+1	; 0x01
    1eca:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ece:	1a 82       	std	Y+2, r1	; 0x02
    1ed0:	1c c0       	rjmp	.+56     	; 0x1f0a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ed6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <GPIO_readPin>
    1eda:	88 23       	and	r24, r24
    1edc:	99 f4       	brne	.+38     	; 0x1f04 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	88 2f       	mov	r24, r24
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	98 2f       	mov	r25, r24
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	89 0f       	add	r24, r25
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	8f 5f       	subi	r24, 0xFF	; 255
    1f08:	8a 83       	std	Y+2, r24	; 0x02
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	84 30       	cpi	r24, 0x04	; 4
    1f0e:	08 f3       	brcs	.-62     	; 0x1ed2 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	84 30       	cpi	r24, 0x04	; 4
    1f1a:	08 f4       	brcc	.+2      	; 0x1f1e <KEYPAD_getPressedKey+0xa0>
    1f1c:	b9 cf       	rjmp	.-142    	; 0x1e90 <KEYPAD_getPressedKey+0x12>
    1f1e:	b6 cf       	rjmp	.-148    	; 0x1e8c <KEYPAD_getPressedKey+0xe>

00001f20 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	3c 83       	std	Y+4, r19	; 0x04
    1f38:	2b 83       	std	Y+3, r18	; 0x03
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	88 30       	cpi	r24, 0x08	; 8
    1f40:	91 05       	cpc	r25, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f44:	70 c0       	rjmp	.+224    	; 0x2026 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	29 30       	cpi	r18, 0x09	; 9
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	5c f5       	brge	.+86     	; 0x1fa6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	91 05       	cpc	r25, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f5a:	59 c0       	rjmp	.+178    	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f60:	25 30       	cpi	r18, 0x05	; 5
    1f62:	31 05       	cpc	r19, r1
    1f64:	9c f4       	brge	.+38     	; 0x1f8c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f70:	48 c0       	rjmp	.+144    	; 0x2002 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	23 30       	cpi	r18, 0x03	; 3
    1f78:	31 05       	cpc	r19, r1
    1f7a:	0c f0       	brlt	.+2      	; 0x1f7e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f7c:	45 c0       	rjmp	.+138    	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f88:	39 c0       	rjmp	.+114    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f8a:	67 c0       	rjmp	.+206    	; 0x205a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f90:	26 30       	cpi	r18, 0x06	; 6
    1f92:	31 05       	cpc	r19, r1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f96:	41 c0       	rjmp	.+130    	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	87 30       	cpi	r24, 0x07	; 7
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	0c f0       	brlt	.+2      	; 0x1fa4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1fa2:	3e c0       	rjmp	.+124    	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1fa4:	37 c0       	rjmp	.+110    	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1faa:	2c 30       	cpi	r18, 0x0C	; 12
    1fac:	31 05       	cpc	r19, r1
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1fb0:	46 c0       	rjmp	.+140    	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	8d 30       	cpi	r24, 0x0D	; 13
    1fb8:	91 05       	cpc	r25, r1
    1fba:	5c f4       	brge	.+22     	; 0x1fd2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc0:	2a 30       	cpi	r18, 0x0A	; 10
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	b1 f1       	breq	.+108    	; 0x2032 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	8b 30       	cpi	r24, 0x0B	; 11
    1fcc:	91 05       	cpc	r25, r1
    1fce:	a4 f5       	brge	.+104    	; 0x2038 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fd0:	2d c0       	rjmp	.+90     	; 0x202c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd6:	2e 30       	cpi	r18, 0x0E	; 14
    1fd8:	31 05       	cpc	r19, r1
    1fda:	b9 f1       	breq	.+110    	; 0x204a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	8e 30       	cpi	r24, 0x0E	; 14
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	7c f1       	brlt	.+94     	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	2f 30       	cpi	r18, 0x0F	; 15
    1fec:	31 05       	cpc	r19, r1
    1fee:	79 f1       	breq	.+94     	; 0x204e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	80 31       	cpi	r24, 0x10	; 16
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	69 f1       	breq	.+90     	; 0x2054 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ffa:	2f c0       	rjmp	.+94     	; 0x205a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ffc:	87 e0       	ldi	r24, 0x07	; 7
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	2e c0       	rjmp	.+92     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2002:	88 e0       	ldi	r24, 0x08	; 8
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	2b c0       	rjmp	.+86     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2008:	89 e0       	ldi	r24, 0x09	; 9
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	28 c0       	rjmp	.+80     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    200e:	85 e2       	ldi	r24, 0x25	; 37
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	25 c0       	rjmp	.+74     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2014:	84 e0       	ldi	r24, 0x04	; 4
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	22 c0       	rjmp	.+68     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    201a:	85 e0       	ldi	r24, 0x05	; 5
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	1f c0       	rjmp	.+62     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2020:	86 e0       	ldi	r24, 0x06	; 6
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	1c c0       	rjmp	.+56     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2026:	8a e2       	ldi	r24, 0x2A	; 42
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	19 c0       	rjmp	.+50     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	16 c0       	rjmp	.+44     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	13 c0       	rjmp	.+38     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	10 c0       	rjmp	.+32     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    203e:	8d e2       	ldi	r24, 0x2D	; 45
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	0d c0       	rjmp	.+26     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2044:	8d e0       	ldi	r24, 0x0D	; 13
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	0a c0       	rjmp	.+20     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    204a:	19 82       	std	Y+1, r1	; 0x01
    204c:	08 c0       	rjmp	.+16     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    204e:	8d e3       	ldi	r24, 0x3D	; 61
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	05 c0       	rjmp	.+10     	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2054:	8b e2       	ldi	r24, 0x2B	; 43
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	02 c0       	rjmp	.+4      	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 01 0c 	call	0x1802	; 0x1802 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	61 e0       	ldi	r22, 0x01	; 1
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 01 0c 	call	0x1802	; 0x1802 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	62 e0       	ldi	r22, 0x02	; 2
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 01 0c 	call	0x1802	; 0x1802 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	6f ef       	ldi	r22, 0xFF	; 255
    2098:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    209c:	88 e3       	ldi	r24, 0x38	; 56
    209e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20a2:	8c e0       	ldi	r24, 0x0C	; 12
    20a4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_sendCommand>
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	e9 97       	sbiw	r28, 0x39	; 57
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	61 e0       	ldi	r22, 0x01	; 1
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e8       	ldi	r26, 0x80	; 128
    20e4:	bf e3       	ldi	r27, 0x3F	; 63
    20e6:	8d ab       	std	Y+53, r24	; 0x35
    20e8:	9e ab       	std	Y+54, r25	; 0x36
    20ea:	af ab       	std	Y+55, r26	; 0x37
    20ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ee:	6d a9       	ldd	r22, Y+53	; 0x35
    20f0:	7e a9       	ldd	r23, Y+54	; 0x36
    20f2:	8f a9       	ldd	r24, Y+55	; 0x37
    20f4:	98 ad       	ldd	r25, Y+56	; 0x38
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	4a e7       	ldi	r20, 0x7A	; 122
    20fc:	53 e4       	ldi	r21, 0x43	; 67
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	89 ab       	std	Y+49, r24	; 0x31
    2108:	9a ab       	std	Y+50, r25	; 0x32
    210a:	ab ab       	std	Y+51, r26	; 0x33
    210c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    210e:	69 a9       	ldd	r22, Y+49	; 0x31
    2110:	7a a9       	ldd	r23, Y+50	; 0x32
    2112:	8b a9       	ldd	r24, Y+51	; 0x33
    2114:	9c a9       	ldd	r25, Y+52	; 0x34
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e8       	ldi	r20, 0x80	; 128
    211c:	5f e3       	ldi	r21, 0x3F	; 63
    211e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2122:	88 23       	and	r24, r24
    2124:	2c f4       	brge	.+10     	; 0x2130 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	98 ab       	std	Y+48, r25	; 0x30
    212c:	8f a7       	std	Y+47, r24	; 0x2f
    212e:	3f c0       	rjmp	.+126    	; 0x21ae <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2130:	69 a9       	ldd	r22, Y+49	; 0x31
    2132:	7a a9       	ldd	r23, Y+50	; 0x32
    2134:	8b a9       	ldd	r24, Y+51	; 0x33
    2136:	9c a9       	ldd	r25, Y+52	; 0x34
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	3f ef       	ldi	r19, 0xFF	; 255
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	57 e4       	ldi	r21, 0x47	; 71
    2140:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2144:	18 16       	cp	r1, r24
    2146:	4c f5       	brge	.+82     	; 0x219a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2148:	6d a9       	ldd	r22, Y+53	; 0x35
    214a:	7e a9       	ldd	r23, Y+54	; 0x36
    214c:	8f a9       	ldd	r24, Y+55	; 0x37
    214e:	98 ad       	ldd	r25, Y+56	; 0x38
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e2       	ldi	r20, 0x20	; 32
    2156:	51 e4       	ldi	r21, 0x41	; 65
    2158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	98 ab       	std	Y+48, r25	; 0x30
    216e:	8f a7       	std	Y+47, r24	; 0x2f
    2170:	0f c0       	rjmp	.+30     	; 0x2190 <LCD_sendCommand+0xdc>
    2172:	89 e1       	ldi	r24, 0x19	; 25
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9e a7       	std	Y+46, r25	; 0x2e
    2178:	8d a7       	std	Y+45, r24	; 0x2d
    217a:	8d a5       	ldd	r24, Y+45	; 0x2d
    217c:	9e a5       	ldd	r25, Y+46	; 0x2e
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_sendCommand+0xca>
    2182:	9e a7       	std	Y+46, r25	; 0x2e
    2184:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2186:	8f a5       	ldd	r24, Y+47	; 0x2f
    2188:	98 a9       	ldd	r25, Y+48	; 0x30
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	98 ab       	std	Y+48, r25	; 0x30
    218e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2190:	8f a5       	ldd	r24, Y+47	; 0x2f
    2192:	98 a9       	ldd	r25, Y+48	; 0x30
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	69 f7       	brne	.-38     	; 0x2172 <LCD_sendCommand+0xbe>
    2198:	14 c0       	rjmp	.+40     	; 0x21c2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219a:	69 a9       	ldd	r22, Y+49	; 0x31
    219c:	7a a9       	ldd	r23, Y+50	; 0x32
    219e:	8b a9       	ldd	r24, Y+51	; 0x33
    21a0:	9c a9       	ldd	r25, Y+52	; 0x34
    21a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	98 ab       	std	Y+48, r25	; 0x30
    21ac:	8f a7       	std	Y+47, r24	; 0x2f
    21ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b0:	98 a9       	ldd	r25, Y+48	; 0x30
    21b2:	9c a7       	std	Y+44, r25	; 0x2c
    21b4:	8b a7       	std	Y+43, r24	; 0x2b
    21b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <LCD_sendCommand+0x106>
    21be:	9c a7       	std	Y+44, r25	; 0x2c
    21c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	8f a3       	std	Y+39, r24	; 0x27
    21d6:	98 a7       	std	Y+40, r25	; 0x28
    21d8:	a9 a7       	std	Y+41, r26	; 0x29
    21da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6f a1       	ldd	r22, Y+39	; 0x27
    21de:	78 a5       	ldd	r23, Y+40	; 0x28
    21e0:	89 a5       	ldd	r24, Y+41	; 0x29
    21e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a e7       	ldi	r20, 0x7A	; 122
    21ea:	53 e4       	ldi	r21, 0x43	; 67
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8b a3       	std	Y+35, r24	; 0x23
    21f6:	9c a3       	std	Y+36, r25	; 0x24
    21f8:	ad a3       	std	Y+37, r26	; 0x25
    21fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21fc:	6b a1       	ldd	r22, Y+35	; 0x23
    21fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2200:	8d a1       	ldd	r24, Y+37	; 0x25
    2202:	9e a1       	ldd	r25, Y+38	; 0x26
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_sendCommand+0x16a>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9a a3       	std	Y+34, r25	; 0x22
    221a:	89 a3       	std	Y+33, r24	; 0x21
    221c:	3f c0       	rjmp	.+126    	; 0x229c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    221e:	6b a1       	ldd	r22, Y+35	; 0x23
    2220:	7c a1       	ldd	r23, Y+36	; 0x24
    2222:	8d a1       	ldd	r24, Y+37	; 0x25
    2224:	9e a1       	ldd	r25, Y+38	; 0x26
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6f a1       	ldd	r22, Y+39	; 0x27
    2238:	78 a5       	ldd	r23, Y+40	; 0x28
    223a:	89 a5       	ldd	r24, Y+41	; 0x29
    223c:	9a a5       	ldd	r25, Y+42	; 0x2a
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	0f c0       	rjmp	.+30     	; 0x227e <LCD_sendCommand+0x1ca>
    2260:	89 e1       	ldi	r24, 0x19	; 25
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	98 a3       	std	Y+32, r25	; 0x20
    2266:	8f 8f       	std	Y+31, r24	; 0x1f
    2268:	8f 8d       	ldd	r24, Y+31	; 0x1f
    226a:	98 a1       	ldd	r25, Y+32	; 0x20
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_sendCommand+0x1b8>
    2270:	98 a3       	std	Y+32, r25	; 0x20
    2272:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	89 a1       	ldd	r24, Y+33	; 0x21
    2276:	9a a1       	ldd	r25, Y+34	; 0x22
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	9a a1       	ldd	r25, Y+34	; 0x22
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <LCD_sendCommand+0x1ac>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6b a1       	ldd	r22, Y+35	; 0x23
    228a:	7c a1       	ldd	r23, Y+36	; 0x24
    228c:	8d a1       	ldd	r24, Y+37	; 0x25
    228e:	9e a1       	ldd	r25, Y+38	; 0x26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9a a3       	std	Y+34, r25	; 0x22
    229a:	89 a3       	std	Y+33, r24	; 0x21
    229c:	89 a1       	ldd	r24, Y+33	; 0x21
    229e:	9a a1       	ldd	r25, Y+34	; 0x22
    22a0:	9e 8f       	std	Y+30, r25	; 0x1e
    22a2:	8d 8f       	std	Y+29, r24	; 0x1d
    22a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_sendCommand+0x1f4>
    22ac:	9e 8f       	std	Y+30, r25	; 0x1e
    22ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	69 ad       	ldd	r22, Y+57	; 0x39
    22b4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <GPIO_writePort>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e8       	ldi	r26, 0x80	; 128
    22be:	bf e3       	ldi	r27, 0x3F	; 63
    22c0:	89 8f       	std	Y+25, r24	; 0x19
    22c2:	9a 8f       	std	Y+26, r25	; 0x1a
    22c4:	ab 8f       	std	Y+27, r26	; 0x1b
    22c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a e7       	ldi	r20, 0x7A	; 122
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8d 8b       	std	Y+21, r24	; 0x15
    22e2:	9e 8b       	std	Y+22, r25	; 0x16
    22e4:	af 8b       	std	Y+23, r26	; 0x17
    22e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ea:	7e 89       	ldd	r23, Y+22	; 0x16
    22ec:	8f 89       	ldd	r24, Y+23	; 0x17
    22ee:	98 8d       	ldd	r25, Y+24	; 0x18
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <LCD_sendCommand+0x256>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    230a:	6d 89       	ldd	r22, Y+21	; 0x15
    230c:	7e 89       	ldd	r23, Y+22	; 0x16
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	69 8d       	ldd	r22, Y+25	; 0x19
    2324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	0f c0       	rjmp	.+30     	; 0x236a <LCD_sendCommand+0x2b6>
    234c:	89 e1       	ldi	r24, 0x19	; 25
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9a 8b       	std	Y+18, r25	; 0x12
    2352:	89 8b       	std	Y+17, r24	; 0x11
    2354:	89 89       	ldd	r24, Y+17	; 0x11
    2356:	9a 89       	ldd	r25, Y+18	; 0x12
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_sendCommand+0x2a4>
    235c:	9a 8b       	std	Y+18, r25	; 0x12
    235e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8b 89       	ldd	r24, Y+19	; 0x13
    2362:	9c 89       	ldd	r25, Y+20	; 0x14
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9c 8b       	std	Y+20, r25	; 0x14
    2368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <LCD_sendCommand+0x298>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	6d 89       	ldd	r22, Y+21	; 0x15
    2376:	7e 89       	ldd	r23, Y+22	; 0x16
    2378:	8f 89       	ldd	r24, Y+23	; 0x17
    237a:	98 8d       	ldd	r25, Y+24	; 0x18
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9c 8b       	std	Y+20, r25	; 0x14
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	8b 89       	ldd	r24, Y+19	; 0x13
    238a:	9c 89       	ldd	r25, Y+20	; 0x14
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	8f 87       	std	Y+15, r24	; 0x0f
    2390:	8f 85       	ldd	r24, Y+15	; 0x0f
    2392:	98 89       	ldd	r25, Y+16	; 0x10
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_sendCommand+0x2e0>
    2398:	98 8b       	std	Y+16, r25	; 0x10
    239a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e8       	ldi	r26, 0x80	; 128
    23ac:	bf e3       	ldi	r27, 0x3F	; 63
    23ae:	8b 87       	std	Y+11, r24	; 0x0b
    23b0:	9c 87       	std	Y+12, r25	; 0x0c
    23b2:	ad 87       	std	Y+13, r26	; 0x0d
    23b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    23bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8f 83       	std	Y+7, r24	; 0x07
    23d0:	98 87       	std	Y+8, r25	; 0x08
    23d2:	a9 87       	std	Y+9, r26	; 0x09
    23d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_sendCommand+0x344>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_sendCommand+0x3a4>
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x392>
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_sendCommand+0x386>
    2460:	14 c0       	rjmp	.+40     	; 0x248a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_sendCommand+0x3ce>
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    248a:	e9 96       	adiw	r28, 0x39	; 57
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	e9 97       	sbiw	r28, 0x39	; 57
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e8       	ldi	r26, 0x80	; 128
    24cc:	bf e3       	ldi	r27, 0x3F	; 63
    24ce:	8d ab       	std	Y+53, r24	; 0x35
    24d0:	9e ab       	std	Y+54, r25	; 0x36
    24d2:	af ab       	std	Y+55, r26	; 0x37
    24d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6d a9       	ldd	r22, Y+53	; 0x35
    24d8:	7e a9       	ldd	r23, Y+54	; 0x36
    24da:	8f a9       	ldd	r24, Y+55	; 0x37
    24dc:	98 ad       	ldd	r25, Y+56	; 0x38
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a e7       	ldi	r20, 0x7A	; 122
    24e4:	53 e4       	ldi	r21, 0x43	; 67
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	89 ab       	std	Y+49, r24	; 0x31
    24f0:	9a ab       	std	Y+50, r25	; 0x32
    24f2:	ab ab       	std	Y+51, r26	; 0x33
    24f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f6:	69 a9       	ldd	r22, Y+49	; 0x31
    24f8:	7a a9       	ldd	r23, Y+50	; 0x32
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	98 ab       	std	Y+48, r25	; 0x30
    2514:	8f a7       	std	Y+47, r24	; 0x2f
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2518:	69 a9       	ldd	r22, Y+49	; 0x31
    251a:	7a a9       	ldd	r23, Y+50	; 0x32
    251c:	8b a9       	ldd	r24, Y+51	; 0x33
    251e:	9c a9       	ldd	r25, Y+52	; 0x34
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6d a9       	ldd	r22, Y+53	; 0x35
    2532:	7e a9       	ldd	r23, Y+54	; 0x36
    2534:	8f a9       	ldd	r24, Y+55	; 0x37
    2536:	98 ad       	ldd	r25, Y+56	; 0x38
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	98 ab       	std	Y+48, r25	; 0x30
    2556:	8f a7       	std	Y+47, r24	; 0x2f
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_displayCharacter+0xdc>
    255a:	89 e1       	ldi	r24, 0x19	; 25
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e a7       	std	Y+46, r25	; 0x2e
    2560:	8d a7       	std	Y+45, r24	; 0x2d
    2562:	8d a5       	ldd	r24, Y+45	; 0x2d
    2564:	9e a5       	ldd	r25, Y+46	; 0x2e
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_displayCharacter+0xca>
    256a:	9e a7       	std	Y+46, r25	; 0x2e
    256c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	98 ab       	std	Y+48, r25	; 0x30
    2576:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8f a5       	ldd	r24, Y+47	; 0x2f
    257a:	98 a9       	ldd	r25, Y+48	; 0x30
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <LCD_displayCharacter+0xbe>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	69 a9       	ldd	r22, Y+49	; 0x31
    2584:	7a a9       	ldd	r23, Y+50	; 0x32
    2586:	8b a9       	ldd	r24, Y+51	; 0x33
    2588:	9c a9       	ldd	r25, Y+52	; 0x34
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	98 ab       	std	Y+48, r25	; 0x30
    2594:	8f a7       	std	Y+47, r24	; 0x2f
    2596:	8f a5       	ldd	r24, Y+47	; 0x2f
    2598:	98 a9       	ldd	r25, Y+48	; 0x30
    259a:	9c a7       	std	Y+44, r25	; 0x2c
    259c:	8b a7       	std	Y+43, r24	; 0x2b
    259e:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_displayCharacter+0x106>
    25a6:	9c a7       	std	Y+44, r25	; 0x2c
    25a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e8       	ldi	r26, 0x80	; 128
    25ba:	bf e3       	ldi	r27, 0x3F	; 63
    25bc:	8f a3       	std	Y+39, r24	; 0x27
    25be:	98 a7       	std	Y+40, r25	; 0x28
    25c0:	a9 a7       	std	Y+41, r26	; 0x29
    25c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6f a1       	ldd	r22, Y+39	; 0x27
    25c6:	78 a5       	ldd	r23, Y+40	; 0x28
    25c8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a e7       	ldi	r20, 0x7A	; 122
    25d2:	53 e4       	ldi	r21, 0x43	; 67
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8b a3       	std	Y+35, r24	; 0x23
    25de:	9c a3       	std	Y+36, r25	; 0x24
    25e0:	ad a3       	std	Y+37, r26	; 0x25
    25e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e4:	6b a1       	ldd	r22, Y+35	; 0x23
    25e6:	7c a1       	ldd	r23, Y+36	; 0x24
    25e8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ea:	9e a1       	ldd	r25, Y+38	; 0x26
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a a3       	std	Y+34, r25	; 0x22
    2602:	89 a3       	std	Y+33, r24	; 0x21
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6f a1       	ldd	r22, Y+39	; 0x27
    2620:	78 a5       	ldd	r23, Y+40	; 0x28
    2622:	89 a5       	ldd	r24, Y+41	; 0x29
    2624:	9a a5       	ldd	r25, Y+42	; 0x2a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9a a3       	std	Y+34, r25	; 0x22
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_displayCharacter+0x1ca>
    2648:	89 e1       	ldi	r24, 0x19	; 25
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	98 a3       	std	Y+32, r25	; 0x20
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
    2650:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2652:	98 a1       	ldd	r25, Y+32	; 0x20
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_displayCharacter+0x1b8>
    2658:	98 a3       	std	Y+32, r25	; 0x20
    265a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9a a3       	std	Y+34, r25	; 0x22
    2664:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	89 a1       	ldd	r24, Y+33	; 0x21
    2668:	9a a1       	ldd	r25, Y+34	; 0x22
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_displayCharacter+0x1ac>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6b a1       	ldd	r22, Y+35	; 0x23
    2672:	7c a1       	ldd	r23, Y+36	; 0x24
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
    2684:	89 a1       	ldd	r24, Y+33	; 0x21
    2686:	9a a1       	ldd	r25, Y+34	; 0x22
    2688:	9e 8f       	std	Y+30, r25	; 0x1e
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
    268c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    268e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_displayCharacter+0x1f4>
    2694:	9e 8f       	std	Y+30, r25	; 0x1e
    2696:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	69 ad       	ldd	r22, Y+57	; 0x39
    269c:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <GPIO_writePort>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	89 8f       	std	Y+25, r24	; 0x19
    26aa:	9a 8f       	std	Y+26, r25	; 0x1a
    26ac:	ab 8f       	std	Y+27, r26	; 0x1b
    26ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a e7       	ldi	r20, 0x7A	; 122
    26be:	53 e4       	ldi	r21, 0x43	; 67
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8d 8b       	std	Y+21, r24	; 0x15
    26ca:	9e 8b       	std	Y+22, r25	; 0x16
    26cc:	af 8b       	std	Y+23, r26	; 0x17
    26ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <LCD_displayCharacter+0x256>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9c 8b       	std	Y+20, r25	; 0x14
    26ee:	8b 8b       	std	Y+19, r24	; 0x13
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	69 8d       	ldd	r22, Y+25	; 0x19
    270c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <LCD_displayCharacter+0x2b6>
    2734:	89 e1       	ldi	r24, 0x19	; 25
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a 8b       	std	Y+18, r25	; 0x12
    273a:	89 8b       	std	Y+17, r24	; 0x11
    273c:	89 89       	ldd	r24, Y+17	; 0x11
    273e:	9a 89       	ldd	r25, Y+18	; 0x12
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_displayCharacter+0x2a4>
    2744:	9a 8b       	std	Y+18, r25	; 0x12
    2746:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8b 89       	ldd	r24, Y+19	; 0x13
    274a:	9c 89       	ldd	r25, Y+20	; 0x14
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <LCD_displayCharacter+0x298>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	8b 89       	ldd	r24, Y+19	; 0x13
    2772:	9c 89       	ldd	r25, Y+20	; 0x14
    2774:	98 8b       	std	Y+16, r25	; 0x10
    2776:	8f 87       	std	Y+15, r24	; 0x0f
    2778:	8f 85       	ldd	r24, Y+15	; 0x0f
    277a:	98 89       	ldd	r25, Y+16	; 0x10
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_displayCharacter+0x2e0>
    2780:	98 8b       	std	Y+16, r25	; 0x10
    2782:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	62 e0       	ldi	r22, 0x02	; 2
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <GPIO_writePin>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a0 e8       	ldi	r26, 0x80	; 128
    2794:	bf e3       	ldi	r27, 0x3F	; 63
    2796:	8b 87       	std	Y+11, r24	; 0x0b
    2798:	9c 87       	std	Y+12, r25	; 0x0c
    279a:	ad 87       	std	Y+13, r26	; 0x0d
    279c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a e7       	ldi	r20, 0x7A	; 122
    27ac:	53 e4       	ldi	r21, 0x43	; 67
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8f 83       	std	Y+7, r24	; 0x07
    27b8:	98 87       	std	Y+8, r25	; 0x08
    27ba:	a9 87       	std	Y+9, r26	; 0x09
    27bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <LCD_displayCharacter+0x344>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	3f c0       	rjmp	.+126    	; 0x285e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    27e0:	6f 81       	ldd	r22, Y+7	; 0x07
    27e2:	78 85       	ldd	r23, Y+8	; 0x08
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCD_displayCharacter+0x3a4>
    2822:	89 e1       	ldi	r24, 0x19	; 25
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_displayCharacter+0x392>
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <LCD_displayCharacter+0x386>
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_displayCharacter+0x3ce>
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2872:	e9 96       	adiw	r28, 0x39	; 57
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <LCD_displayString+0x6>
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9b 83       	std	Y+3, r25	; 0x03
    2892:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2894:	19 82       	std	Y+1, r1	; 0x01
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	fc 01       	movw	r30, r24
    28a4:	e2 0f       	add	r30, r18
    28a6:	f3 1f       	adc	r31, r19
    28a8:	80 81       	ld	r24, Z
    28aa:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_displayCharacter>
		i++;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	88 23       	and	r24, r24
    28c8:	39 f7       	brne	.-50     	; 0x2898 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <LCD_moveCursor+0x6>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <LCD_moveCursor+0x8>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3d 83       	std	Y+5, r19	; 0x05
    28f0:	2c 83       	std	Y+4, r18	; 0x04
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	c1 f0       	breq	.+48     	; 0x292c <LCD_moveCursor+0x56>
    28fc:	2c 81       	ldd	r18, Y+4	; 0x04
    28fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2900:	22 30       	cpi	r18, 0x02	; 2
    2902:	31 05       	cpc	r19, r1
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_moveCursor+0x3a>
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	61 f0       	breq	.+24     	; 0x2926 <LCD_moveCursor+0x50>
    290e:	19 c0       	rjmp	.+50     	; 0x2942 <LCD_moveCursor+0x6c>
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	22 30       	cpi	r18, 0x02	; 2
    2916:	31 05       	cpc	r19, r1
    2918:	69 f0       	breq	.+26     	; 0x2934 <LCD_moveCursor+0x5e>
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	61 f0       	breq	.+24     	; 0x293c <LCD_moveCursor+0x66>
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	80 5c       	subi	r24, 0xC0	; 192
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	80 5f       	subi	r24, 0xF0	; 240
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	80 5b       	subi	r24, 0xB0	; 176
    2940:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_sendCommand>
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <LCD_displayStringRowColumn+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <LCD_displayStringRowColumn+0x8>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	6a 83       	std	Y+2, r22	; 0x02
    296a:	5c 83       	std	Y+4, r21	; 0x04
    296c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	6a 81       	ldd	r22, Y+2	; 0x02
    2972:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	62 97       	sbiw	r28, 0x12	; 18
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	9a 8b       	std	Y+18, r25	; 0x12
    29a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	9a 89       	ldd	r25, Y+18	; 0x12
    29a8:	9e 01       	movw	r18, r28
    29aa:	2f 5f       	subi	r18, 0xFF	; 255
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	b9 01       	movw	r22, r18
    29b0:	4a e0       	ldi	r20, 0x0A	; 10
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <itoa>
   LCD_displayString(buff); /* Display the string */
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
}
    29c0:	62 96       	adiw	r28, 0x12	; 18
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_sendCommand>
}
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	if(timer0_interrupt_callBackPtr != NULL_PTR)
    2a10:	80 91 04 01 	lds	r24, 0x0104
    2a14:	90 91 05 01 	lds	r25, 0x0105
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	29 f0       	breq	.+10     	; 0x2a26 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the overflow is detected */
			(*timer0_interrupt_callBackPtr)();
    2a1c:	e0 91 04 01 	lds	r30, 0x0104
    2a20:	f0 91 05 01 	lds	r31, 0x0105
    2a24:	09 95       	icall
		}
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	ff 91       	pop	r31
    2a2c:	ef 91       	pop	r30
    2a2e:	bf 91       	pop	r27
    2a30:	af 91       	pop	r26
    2a32:	9f 91       	pop	r25
    2a34:	8f 91       	pop	r24
    2a36:	7f 91       	pop	r23
    2a38:	6f 91       	pop	r22
    2a3a:	5f 91       	pop	r21
    2a3c:	4f 91       	pop	r20
    2a3e:	3f 91       	pop	r19
    2a40:	2f 91       	pop	r18
    2a42:	0f 90       	pop	r0
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	0f 90       	pop	r0
    2a48:	1f 90       	pop	r1
    2a4a:	18 95       	reti

00002a4c <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2a4c:	1f 92       	push	r1
    2a4e:	0f 92       	push	r0
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	0f 92       	push	r0
    2a54:	11 24       	eor	r1, r1
    2a56:	2f 93       	push	r18
    2a58:	3f 93       	push	r19
    2a5a:	4f 93       	push	r20
    2a5c:	5f 93       	push	r21
    2a5e:	6f 93       	push	r22
    2a60:	7f 93       	push	r23
    2a62:	8f 93       	push	r24
    2a64:	9f 93       	push	r25
    2a66:	af 93       	push	r26
    2a68:	bf 93       	push	r27
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	if(timer0_interrupt_callBackPtr != NULL_PTR)
    2a76:	80 91 04 01 	lds	r24, 0x0104
    2a7a:	90 91 05 01 	lds	r25, 0x0105
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <__vector_19+0x40>
		{
			/* Call the Call Back function in the application after the compare match is detected */
			(*timer0_interrupt_callBackPtr)();
    2a82:	e0 91 04 01 	lds	r30, 0x0104
    2a86:	f0 91 05 01 	lds	r31, 0x0105
    2a8a:	09 95       	icall
		}
}
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	ff 91       	pop	r31
    2a92:	ef 91       	pop	r30
    2a94:	bf 91       	pop	r27
    2a96:	af 91       	pop	r26
    2a98:	9f 91       	pop	r25
    2a9a:	8f 91       	pop	r24
    2a9c:	7f 91       	pop	r23
    2a9e:	6f 91       	pop	r22
    2aa0:	5f 91       	pop	r21
    2aa2:	4f 91       	pop	r20
    2aa4:	3f 91       	pop	r19
    2aa6:	2f 91       	pop	r18
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	0f 90       	pop	r0
    2aae:	1f 90       	pop	r1
    2ab0:	18 95       	reti

00002ab2 <Timer0_init>:
 * 2. Put initial value in TCNT0 register
 * 3. Select the required prescaler
 * 4. choose the compare value in case of compare mode
 */
void Timer0_init(const Timer0_ConfigType *Config_Ptr)
{   /* Open general interrupt */
    2ab2:	df 93       	push	r29
    2ab4:	cf 93       	push	r28
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <Timer0_init+0x6>
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	9a 83       	std	Y+2, r25	; 0x02
    2abe:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);
    2ac0:	af e5       	ldi	r26, 0x5F	; 95
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	ef e5       	ldi	r30, 0x5F	; 95
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 68       	ori	r24, 0x80	; 128
    2acc:	8c 93       	st	X, r24
	/* Set FOC0 for non-PWM mode */
	TCCR0 |=(1<<FOC0);
    2ace:	a3 e5       	ldi	r26, 0x53	; 83
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e3 e5       	ldi	r30, 0x53	; 83
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	80 68       	ori	r24, 0x80	; 128
    2ada:	8c 93       	st	X, r24
	/* initial value */
	TCNT0 = Config_Ptr->initial_value ;
    2adc:	a2 e5       	ldi	r26, 0x52	; 82
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae4:	81 81       	ldd	r24, Z+1	; 0x01
    2ae6:	8c 93       	st	X, r24

	/*in case of normal mode */
	if(Config_Ptr->mode == Normal)
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	80 81       	ld	r24, Z
    2aee:	88 23       	and	r24, r24
    2af0:	b1 f4       	brne	.+44     	; 0x2b1e <Timer0_init+0x6c>
	{
		TCCR0 &= ~(1<<WGM00) ;
    2af2:	a3 e5       	ldi	r26, 0x53	; 83
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	e3 e5       	ldi	r30, 0x53	; 83
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	8f 7b       	andi	r24, 0xBF	; 191
    2afe:	8c 93       	st	X, r24
		TCCR0 &= ~(1<<WGM01) ;
    2b00:	a3 e5       	ldi	r26, 0x53	; 83
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e3 e5       	ldi	r30, 0x53	; 83
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	87 7f       	andi	r24, 0xF7	; 247
    2b0c:	8c 93       	st	X, r24
		/* Enable Timer0 Overflow Interrupt */
		TIMSK |= (1<<TOIE0);
    2b0e:	a9 e5       	ldi	r26, 0x59	; 89
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e9 e5       	ldi	r30, 0x59	; 89
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	81 60       	ori	r24, 0x01	; 1
    2b1a:	8c 93       	st	X, r24
    2b1c:	19 c0       	rjmp	.+50     	; 0x2b50 <Timer0_init+0x9e>
	}

	/*in case of compare mode */
	else if(Config_Ptr->mode == CTC)
    2b1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b20:	fa 81       	ldd	r31, Y+2	; 0x02
    2b22:	80 81       	ld	r24, Z
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	a1 f4       	brne	.+40     	; 0x2b50 <Timer0_init+0x9e>
	{
		TCCR0|=(1<<WGM01);
    2b28:	a3 e5       	ldi	r26, 0x53	; 83
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	e3 e5       	ldi	r30, 0x53	; 83
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	88 60       	ori	r24, 0x08	; 8
    2b34:	8c 93       	st	X, r24
		/*store compare value in OCR0 register */
		OCR0 = Config_Ptr->compare_value ;
    2b36:	ac e5       	ldi	r26, 0x5C	; 92
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3e:	83 81       	ldd	r24, Z+3	; 0x03
    2b40:	8c 93       	st	X, r24
		/*Enable Timer0 Compare Interrupt */
		TIMSK |= (1<<OCIE0);
    2b42:	a9 e5       	ldi	r26, 0x59	; 89
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e9 e5       	ldi	r30, 0x59	; 89
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	82 60       	ori	r24, 0x02	; 2
    2b4e:	8c 93       	st	X, r24
	}

	/*select prescaler */
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr ->prescaler);
    2b50:	a3 e5       	ldi	r26, 0x53	; 83
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e3 e5       	ldi	r30, 0x53	; 83
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	98 2f       	mov	r25, r24
    2b5c:	98 7f       	andi	r25, 0xF8	; 248
    2b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b60:	fa 81       	ldd	r31, Y+2	; 0x02
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	89 2b       	or	r24, r25
    2b66:	8c 93       	st	X, r24

}
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <Timer0_setCallBack>:
 * each time there is an interrupt either this interrupt is because of overflow
 * or compare match detection
 */

void Timer0_setCallBack(void(*function_ptr)(void))
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <Timer0_setCallBack+0x6>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_interrupt_callBackPtr = function_ptr;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	90 93 05 01 	sts	0x0105, r25
    2b88:	80 93 04 01 	sts	0x0104, r24
}
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <Timer0_deinit>:
/*Description :
 * function to disable timer0
 */

void Timer0_deinit(void)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer0 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE0);
    2b9e:	a9 e5       	ldi	r26, 0x59	; 89
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	e9 e5       	ldi	r30, 0x59	; 89
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8e 7f       	andi	r24, 0xFE	; 254
    2baa:	8c 93       	st	X, r24
	/* Disable Timer0 Compare Interrupt */
	TIMSK &= ~(1<<OCIE0);
    2bac:	a9 e5       	ldi	r26, 0x59	; 89
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	e9 e5       	ldi	r30, 0x59	; 89
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8d 7f       	andi	r24, 0xFD	; 253
    2bb8:	8c 93       	st	X, r24
	/* Turn off the timer */
	TCCR0 &= ~(1<<CS00) ;
    2bba:	a3 e5       	ldi	r26, 0x53	; 83
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e3 e5       	ldi	r30, 0x53	; 83
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	8e 7f       	andi	r24, 0xFE	; 254
    2bc6:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<CS01) ;
    2bc8:	a3 e5       	ldi	r26, 0x53	; 83
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e3 e5       	ldi	r30, 0x53	; 83
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8d 7f       	andi	r24, 0xFD	; 253
    2bd4:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<CS02) ;
    2bd6:	a3 e5       	ldi	r26, 0x53	; 83
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	e3 e5       	ldi	r30, 0x53	; 83
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	8b 7f       	andi	r24, 0xFB	; 251
    2be2:	8c 93       	st	X, r24


}
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <UART_init+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <UART_init+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	9c 83       	std	Y+4, r25	; 0x04
    2bf8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2bfa:	1a 82       	std	Y+2, r1	; 0x02
    2bfc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2bfe:	eb e2       	ldi	r30, 0x2B	; 43
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c06:	ea e2       	ldi	r30, 0x2A	; 42
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	88 e1       	ldi	r24, 0x18	; 24
    2c0c:	80 83       	st	Z, r24
	 * UPM1:0  = based on the parity mode chosen in the configuration
	 * USBS    = 0 One stop bit or 1 for 2 stop bits
	 * UCSZ1:0 = based on number of bits chosen in the configuration
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) ;
    2c0e:	a0 e4       	ldi	r26, 0x40	; 64
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e0 e4       	ldi	r30, 0x40	; 64
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	80 68       	ori	r24, 0x80	; 128
    2c1a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity_mode)<<4 );
    2c1c:	a0 e4       	ldi	r26, 0x40	; 64
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e0 e4       	ldi	r30, 0x40	; 64
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	28 2f       	mov	r18, r24
    2c28:	2f 7c       	andi	r18, 0xCF	; 207
    2c2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2e:	81 81       	ldd	r24, Z+1	; 0x01
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	82 95       	swap	r24
    2c36:	92 95       	swap	r25
    2c38:	90 7f       	andi	r25, 0xF0	; 240
    2c3a:	98 27       	eor	r25, r24
    2c3c:	80 7f       	andi	r24, 0xF0	; 240
    2c3e:	98 27       	eor	r25, r24
    2c40:	82 2b       	or	r24, r18
    2c42:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bits)<< 3);
    2c44:	a0 e4       	ldi	r26, 0x40	; 64
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e0 e4       	ldi	r30, 0x40	; 64
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	28 2f       	mov	r18, r24
    2c50:	27 7f       	andi	r18, 0xF7	; 247
    2c52:	eb 81       	ldd	r30, Y+3	; 0x03
    2c54:	fc 81       	ldd	r31, Y+4	; 0x04
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	82 2b       	or	r24, r18
    2c6a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ( ( (Config_Ptr->character_size)<< 1) & 0x06);
    2c6c:	a0 e4       	ldi	r26, 0x40	; 64
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e0 e4       	ldi	r30, 0x40	; 64
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	28 2f       	mov	r18, r24
    2c78:	29 7f       	andi	r18, 0xF9	; 249
    2c7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c7e:	80 81       	ld	r24, Z
    2c80:	88 2f       	mov	r24, r24
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	86 70       	andi	r24, 0x06	; 6
    2c8a:	82 2b       	or	r24, r18
    2c8c:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr->character_size) & 0x04);
    2c8e:	aa e2       	ldi	r26, 0x2A	; 42
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	ea e2       	ldi	r30, 0x2A	; 42
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	98 2f       	mov	r25, r24
    2c9a:	9b 7f       	andi	r25, 0xFB	; 251
    2c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2ca0:	80 81       	ld	r24, Z
    2ca2:	84 70       	andi	r24, 0x04	; 4
    2ca4:	89 2b       	or	r24, r25
    2ca6:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->Baud_Rate * 8UL))) - 1);
    2ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    2caa:	fc 81       	ldd	r31, Y+4	; 0x04
    2cac:	83 81       	ldd	r24, Z+3	; 0x03
    2cae:	94 81       	ldd	r25, Z+4	; 0x04
    2cb0:	a5 81       	ldd	r26, Z+5	; 0x05
    2cb2:	b6 81       	ldd	r27, Z+6	; 0x06
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	aa 1f       	adc	r26, r26
    2cba:	bb 1f       	adc	r27, r27
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	aa 1f       	adc	r26, r26
    2cc2:	bb 1f       	adc	r27, r27
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	aa 1f       	adc	r26, r26
    2cca:	bb 1f       	adc	r27, r27
    2ccc:	9c 01       	movw	r18, r24
    2cce:	ad 01       	movw	r20, r26
    2cd0:	80 e4       	ldi	r24, 0x40	; 64
    2cd2:	92 e4       	ldi	r25, 0x42	; 66
    2cd4:	af e0       	ldi	r26, 0x0F	; 15
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__udivmodsi4>
    2ce0:	da 01       	movw	r26, r20
    2ce2:	c9 01       	movw	r24, r18
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2cea:	e0 e4       	ldi	r30, 0x40	; 64
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	89 2f       	mov	r24, r25
    2cf4:	99 27       	eor	r25, r25
    2cf6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2cf8:	e9 e2       	ldi	r30, 0x29	; 41
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	80 83       	st	Z, r24
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	cf 91       	pop	r28
    2d0a:	df 91       	pop	r29
    2d0c:	08 95       	ret

00002d0e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d0e:	df 93       	push	r29
    2d10:	cf 93       	push	r28
    2d12:	0f 92       	push	r0
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2d1a:	eb e2       	ldi	r30, 0x2B	; 43
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	80 72       	andi	r24, 0x20	; 32
    2d26:	90 70       	andi	r25, 0x00	; 0
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	b9 f3       	breq	.-18     	; 0x2d1a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2d2c:	ec e2       	ldi	r30, 0x2C	; 44
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2d34:	0f 90       	pop	r0
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2d44:	eb e2       	ldi	r30, 0x2B	; 43
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	88 23       	and	r24, r24
    2d4c:	dc f7       	brge	.-10     	; 0x2d44 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2d4e:	ec e2       	ldi	r30, 0x2C	; 44
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
}
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <UART_sendString+0x6>
    2d60:	0f 92       	push	r0
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9b 83       	std	Y+3, r25	; 0x03
    2d68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d6a:	19 82       	std	Y+1, r1	; 0x01
    2d6c:	0e c0       	rjmp	.+28     	; 0x2d8a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	9b 81       	ldd	r25, Y+3	; 0x03
    2d78:	fc 01       	movw	r30, r24
    2d7a:	e2 0f       	add	r30, r18
    2d7c:	f3 1f       	adc	r31, r19
    2d7e:	80 81       	ld	r24, Z
    2d80:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <UART_sendByte>
		i++;
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	28 2f       	mov	r18, r24
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	9b 81       	ldd	r25, Y+3	; 0x03
    2d94:	fc 01       	movw	r30, r24
    2d96:	e2 0f       	add	r30, r18
    2d98:	f3 1f       	adc	r31, r19
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 23       	and	r24, r24
    2d9e:	39 f7       	brne	.-50     	; 0x2d6e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <UART_receiveString+0xa>
    2db6:	0f 92       	push	r0
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	9b 83       	std	Y+3, r25	; 0x03
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dc0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	9b 81       	ldd	r25, Y+3	; 0x03
    2dcc:	8c 01       	movw	r16, r24
    2dce:	02 0f       	add	r16, r18
    2dd0:	13 1f       	adc	r17, r19
    2dd2:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <UART_recieveByte>
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	80 83       	st	Z, r24
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	28 2f       	mov	r18, r24
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	9b 81       	ldd	r25, Y+3	; 0x03
    2dec:	8c 01       	movw	r16, r24
    2dee:	02 0f       	add	r16, r18
    2df0:	13 1f       	adc	r17, r19
    2df2:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <UART_recieveByte>
    2df6:	f8 01       	movw	r30, r16
    2df8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	9b 81       	ldd	r25, Y+3	; 0x03
    2e04:	fc 01       	movw	r30, r24
    2e06:	e2 0f       	add	r30, r18
    2e08:	f3 1f       	adc	r31, r19
    2e0a:	80 81       	ld	r24, Z
    2e0c:	83 32       	cpi	r24, 0x23	; 35
    2e0e:	31 f7       	brne	.-52     	; 0x2ddc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e2 0f       	add	r30, r18
    2e1e:	f3 1f       	adc	r31, r19
    2e20:	10 82       	st	Z, r1
}
    2e22:	0f 90       	pop	r0
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	08 95       	ret

00002e32 <__udivmodsi4>:
    2e32:	a1 e2       	ldi	r26, 0x21	; 33
    2e34:	1a 2e       	mov	r1, r26
    2e36:	aa 1b       	sub	r26, r26
    2e38:	bb 1b       	sub	r27, r27
    2e3a:	fd 01       	movw	r30, r26
    2e3c:	0d c0       	rjmp	.+26     	; 0x2e58 <__udivmodsi4_ep>

00002e3e <__udivmodsi4_loop>:
    2e3e:	aa 1f       	adc	r26, r26
    2e40:	bb 1f       	adc	r27, r27
    2e42:	ee 1f       	adc	r30, r30
    2e44:	ff 1f       	adc	r31, r31
    2e46:	a2 17       	cp	r26, r18
    2e48:	b3 07       	cpc	r27, r19
    2e4a:	e4 07       	cpc	r30, r20
    2e4c:	f5 07       	cpc	r31, r21
    2e4e:	20 f0       	brcs	.+8      	; 0x2e58 <__udivmodsi4_ep>
    2e50:	a2 1b       	sub	r26, r18
    2e52:	b3 0b       	sbc	r27, r19
    2e54:	e4 0b       	sbc	r30, r20
    2e56:	f5 0b       	sbc	r31, r21

00002e58 <__udivmodsi4_ep>:
    2e58:	66 1f       	adc	r22, r22
    2e5a:	77 1f       	adc	r23, r23
    2e5c:	88 1f       	adc	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	1a 94       	dec	r1
    2e62:	69 f7       	brne	.-38     	; 0x2e3e <__udivmodsi4_loop>
    2e64:	60 95       	com	r22
    2e66:	70 95       	com	r23
    2e68:	80 95       	com	r24
    2e6a:	90 95       	com	r25
    2e6c:	9b 01       	movw	r18, r22
    2e6e:	ac 01       	movw	r20, r24
    2e70:	bd 01       	movw	r22, r26
    2e72:	cf 01       	movw	r24, r30
    2e74:	08 95       	ret

00002e76 <__prologue_saves__>:
    2e76:	2f 92       	push	r2
    2e78:	3f 92       	push	r3
    2e7a:	4f 92       	push	r4
    2e7c:	5f 92       	push	r5
    2e7e:	6f 92       	push	r6
    2e80:	7f 92       	push	r7
    2e82:	8f 92       	push	r8
    2e84:	9f 92       	push	r9
    2e86:	af 92       	push	r10
    2e88:	bf 92       	push	r11
    2e8a:	cf 92       	push	r12
    2e8c:	df 92       	push	r13
    2e8e:	ef 92       	push	r14
    2e90:	ff 92       	push	r15
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	ca 1b       	sub	r28, r26
    2ea0:	db 0b       	sbc	r29, r27
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	09 94       	ijmp

00002eae <__epilogue_restores__>:
    2eae:	2a 88       	ldd	r2, Y+18	; 0x12
    2eb0:	39 88       	ldd	r3, Y+17	; 0x11
    2eb2:	48 88       	ldd	r4, Y+16	; 0x10
    2eb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eba:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ebc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ebe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ec0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ec2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ec4:	df 80       	ldd	r13, Y+7	; 0x07
    2ec6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ec8:	fd 80       	ldd	r15, Y+5	; 0x05
    2eca:	0c 81       	ldd	r16, Y+4	; 0x04
    2ecc:	1b 81       	ldd	r17, Y+3	; 0x03
    2ece:	aa 81       	ldd	r26, Y+2	; 0x02
    2ed0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ed2:	ce 0f       	add	r28, r30
    2ed4:	d1 1d       	adc	r29, r1
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	ed 01       	movw	r28, r26
    2ee2:	08 95       	ret

00002ee4 <itoa>:
    2ee4:	fb 01       	movw	r30, r22
    2ee6:	9f 01       	movw	r18, r30
    2ee8:	e8 94       	clt
    2eea:	42 30       	cpi	r20, 0x02	; 2
    2eec:	c4 f0       	brlt	.+48     	; 0x2f1e <itoa+0x3a>
    2eee:	45 32       	cpi	r20, 0x25	; 37
    2ef0:	b4 f4       	brge	.+44     	; 0x2f1e <itoa+0x3a>
    2ef2:	4a 30       	cpi	r20, 0x0A	; 10
    2ef4:	29 f4       	brne	.+10     	; 0x2f00 <itoa+0x1c>
    2ef6:	97 fb       	bst	r25, 7
    2ef8:	1e f4       	brtc	.+6      	; 0x2f00 <itoa+0x1c>
    2efa:	90 95       	com	r25
    2efc:	81 95       	neg	r24
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	64 2f       	mov	r22, r20
    2f02:	77 27       	eor	r23, r23
    2f04:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__udivmodhi4>
    2f08:	80 5d       	subi	r24, 0xD0	; 208
    2f0a:	8a 33       	cpi	r24, 0x3A	; 58
    2f0c:	0c f0       	brlt	.+2      	; 0x2f10 <itoa+0x2c>
    2f0e:	89 5d       	subi	r24, 0xD9	; 217
    2f10:	81 93       	st	Z+, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	a1 f7       	brne	.-24     	; 0x2f00 <itoa+0x1c>
    2f18:	16 f4       	brtc	.+4      	; 0x2f1e <itoa+0x3a>
    2f1a:	5d e2       	ldi	r21, 0x2D	; 45
    2f1c:	51 93       	st	Z+, r21
    2f1e:	10 82       	st	Z, r1
    2f20:	c9 01       	movw	r24, r18
    2f22:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <strrev>

00002f26 <strrev>:
    2f26:	dc 01       	movw	r26, r24
    2f28:	fc 01       	movw	r30, r24
    2f2a:	67 2f       	mov	r22, r23
    2f2c:	71 91       	ld	r23, Z+
    2f2e:	77 23       	and	r23, r23
    2f30:	e1 f7       	brne	.-8      	; 0x2f2a <strrev+0x4>
    2f32:	32 97       	sbiw	r30, 0x02	; 2
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <strrev+0x18>
    2f36:	7c 91       	ld	r23, X
    2f38:	6d 93       	st	X+, r22
    2f3a:	70 83       	st	Z, r23
    2f3c:	62 91       	ld	r22, -Z
    2f3e:	ae 17       	cp	r26, r30
    2f40:	bf 07       	cpc	r27, r31
    2f42:	c8 f3       	brcs	.-14     	; 0x2f36 <strrev+0x10>
    2f44:	08 95       	ret

00002f46 <__udivmodhi4>:
    2f46:	aa 1b       	sub	r26, r26
    2f48:	bb 1b       	sub	r27, r27
    2f4a:	51 e1       	ldi	r21, 0x11	; 17
    2f4c:	07 c0       	rjmp	.+14     	; 0x2f5c <__udivmodhi4_ep>

00002f4e <__udivmodhi4_loop>:
    2f4e:	aa 1f       	adc	r26, r26
    2f50:	bb 1f       	adc	r27, r27
    2f52:	a6 17       	cp	r26, r22
    2f54:	b7 07       	cpc	r27, r23
    2f56:	10 f0       	brcs	.+4      	; 0x2f5c <__udivmodhi4_ep>
    2f58:	a6 1b       	sub	r26, r22
    2f5a:	b7 0b       	sbc	r27, r23

00002f5c <__udivmodhi4_ep>:
    2f5c:	88 1f       	adc	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	5a 95       	dec	r21
    2f62:	a9 f7       	brne	.-22     	; 0x2f4e <__udivmodhi4_loop>
    2f64:	80 95       	com	r24
    2f66:	90 95       	com	r25
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	08 95       	ret

00002f6e <_exit>:
    2f6e:	f8 94       	cli

00002f70 <__stop_program>:
    2f70:	ff cf       	rjmp	.-2      	; 0x2f70 <__stop_program>
